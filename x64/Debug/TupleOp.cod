; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28105.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7F8AB566_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2FC657CE_cstdlib DB 01H
__70639AFA_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__8A0D8D63_cstddef DB 01H
__C8593937_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__96AB3BB0_vcruntime_exception@h DB 01H
__A47A247F_exception DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__289D9ECD_limits DB 01H
__F3238959_xutility DB 01H
__725EB186_xmemory DB 01H
__D64083BB_tuple DB 01H
__2DF72A1A_xpolymorphic_allocator@h DB 01H
__068D371A_xstring DB 01H
__2D341E22_stdexcept DB 01H
__502C2D49_xcall_once@h DB 01H
__EF713F69_system_error DB 01H
__B69C91F9_vcruntime_typeinfo@h DB 01H
__83FC7A40_typeinfo DB 01H
__94339243_memory DB 01H
__B876C54C_xfacet DB 01H
__7242C389_ctype@h DB 01H
__9C759988_xlocinfo DB 01H
__D9B3432B_xlocale DB 01H
__A590EE9B_xiosbase DB 01H
__4734253C_xlocnum DB 01H
__1421D064_ios DB 01H
__E0E014DF_string DB 01H
__203B6EE8_TupleOp@cpp DB 01H
__A973ACD5_istream DB 01H
__CAA399EF_ostream DB 01H
__2F94A69E_streambuf DB 01H
__E4744B4B_iosfwd DB 01H
__18CBD245_utility DB 01H
__EFD44557_xstddef DB 01H
__AE76A8A9_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?run@TupleOp@@QEAAXXZ				; TupleOp::run
PUBLIC	?foo@TupleOp@@AEAAXXZ				; TupleOp::foo
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?name@type_info@@QEBAPEBDXZ			; type_info::name
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z ; std::make_tuple<int,int,double,char>
PUBLIC	??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><int,int,double,char,0>
PUBLIC	??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z ; std::make_tuple<int,int,int>
PUBLIC	??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><int,int,int,0>
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?compare@detail@@YA_NZZ				; detail::compare
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$forward@H@std@@YA$$QEAHAEAH@Z		; std::forward<int>
PUBLIC	??$forward@N@std@@YA$$QEANAEAN@Z		; std::forward<double>
PUBLIC	??$forward@D@std@@YA$$QEADAEAD@Z		; std::forward<char>
PUBLIC	??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z ; std::tuple<int,int,double,char>::tuple<int,int,double,char><int,int,double,char,0>
PUBLIC	??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::move<std::tuple<int,int,double,char> &>
PUBLIC	??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0>
PUBLIC	??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z	; std::tuple<int,int,int>::tuple<int,int,int><int,int,int,0>
PUBLIC	??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::move<std::tuple<int,int,int> &>
PUBLIC	??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0>
PUBLIC	??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z	; std::get<0,int,double,long>
PUBLIC	??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z	; std::get<1,int,double,long>
PUBLIC	??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z	; std::get<2,int,double,long>
PUBLIC	??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z	; std::get<3,int,short,double,char>
PUBLIC	??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z	; std::get<2,int,short,double,char>
PUBLIC	??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z	; std::get<1,int,short,double,char>
PUBLIC	??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z ; std::get<0,int,short,double,char>
PUBLIC	??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ; std::tuple<int,int,double,char>::tuple<int,int,double,char><std::_Exact_args_t,int,int,double,char,0>
PUBLIC	??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
PUBLIC	??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0,1,2,3,0>
PUBLIC	??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ; std::tuple<int,int,int>::tuple<int,int,int><std::_Exact_args_t,int,int,int,0>
PUBLIC	??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::forward<std::tuple<int,int,int> >
PUBLIC	??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0,1,2,0>
PUBLIC	??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ; std::tuple<int,double,char>::tuple<int,double,char><std::_Exact_args_t,int,double,char,0>
PUBLIC	??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z	; std::_Tuple_val<int>::_Tuple_val<int><int>
PUBLIC	??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ; std::get<0,int,int,double,char>
PUBLIC	??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ; std::get<1,int,int,double,char>
PUBLIC	??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z ; std::get<2,int,int,double,char>
PUBLIC	??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z ; std::get<3,int,int,double,char>
PUBLIC	??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Exact_args_t,int,int,double,char,0>
PUBLIC	??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ; std::tuple<int,int>::tuple<int,int><std::_Exact_args_t,int,int,0>
PUBLIC	??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<0,int,int,int>
PUBLIC	??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<1,int,int,int>
PUBLIC	??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<2,int,int,int>
PUBLIC	??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Exact_args_t,int,int,int,0>
PUBLIC	??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z ; std::tuple<double,char>::tuple<double,char><std::_Exact_args_t,double,char,0>
PUBLIC	??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ; std::tuple<short,double,char>::tuple<short,double,char><std::_Exact_args_t,int,double,char,0>
PUBLIC	??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ; std::tuple<int>::tuple<int><std::_Exact_args_t,int,0>
PUBLIC	??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ; std::tuple<double,long>::tuple<double,long><std::_Exact_args_t,int,int,0>
PUBLIC	??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z ; std::tuple<char>::tuple<char><std::_Exact_args_t,char,0>
PUBLIC	??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z	; std::_Tuple_val<double>::_Tuple_val<double><double>
PUBLIC	??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z	; std::_Tuple_val<short>::_Tuple_val<short><int>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ; std::tuple<long>::tuple<long><std::_Exact_args_t,int,0>
PUBLIC	??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z	; std::_Tuple_val<double>::_Tuple_val<double><int>
PUBLIC	??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z	; std::_Tuple_val<char>::_Tuple_val<char><char>
PUBLIC	??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z	; std::_Tuple_val<long>::_Tuple_val<long><int>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03EGFGIICL@n?3?$DN@			; `string'
PUBLIC	??_C@_06OAKHEHLG@type?3?$DN@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6@			; `string'
PUBLIC	??_C@_0L@EBNOBGBO@a?5size_t?3?$DN@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_03HJPCDPNA@t?3?$DN@			; `string'
PUBLIC	__real@4008000000000000
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_type_info_name:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@F@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:BYTE ; __type_info_root_node
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?run@TupleOp@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?run@TupleOp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?foo@TupleOp@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?foo@TupleOp@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?name@type_info@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?name@type_info@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1124
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+91
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel $LN23
	DD	imagerel $LN23+1095
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+91
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TestPrint@?A0xf50bbb2b@@YAXXZ DD imagerel ?TestPrint@?A0xf50bbb2b@@YAXXZ
	DD	imagerel ?TestPrint@?A0xf50bbb2b@@YAXXZ+209
	DD	imagerel $unwind$?TestPrint@?A0xf50bbb2b@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z DD imagerel ??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z
	DD	imagerel ??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z+114
	DD	imagerel $unwind$??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MainPrint@?A0xf50bbb2b@@YAXXZ DD imagerel ?MainPrint@?A0xf50bbb2b@@YAXXZ
	DD	imagerel ?MainPrint@?A0xf50bbb2b@@YAXXZ+357
	DD	imagerel $unwind$?MainPrint@?A0xf50bbb2b@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+176
	DD	imagerel $unwind$??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z DD imagerel ??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z
	DD	imagerel ??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z+236
	DD	imagerel $unwind$??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@detail@@YA_NZZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?compare@detail@@YA_NZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@H@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$forward@H@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@N@std@@YA$$QEANAEAN@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$forward@N@std@@YA$$QEANAEAN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@D@std@@YA$$QEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$forward@D@std@@YA$$QEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+296
	DD	imagerel $unwind$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
	DD	imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z+142
	DD	imagerel $unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+251
	DD	imagerel $unwind$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Fun@H@?A0xf50bbb2b@@YAXH@Z DD imagerel ??$Fun@H@?A0xf50bbb2b@@YAXH@Z
	DD	imagerel ??$Fun@H@?A0xf50bbb2b@@YAXH@Z+134
	DD	imagerel $unwind$??$Fun@H@?A0xf50bbb2b@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Fun@N@?A0xf50bbb2b@@YAXN@Z DD imagerel ??$Fun@N@?A0xf50bbb2b@@YAXN@Z
	DD	imagerel ??$Fun@N@?A0xf50bbb2b@@YAXN@Z+131
	DD	imagerel $unwind$??$Fun@N@?A0xf50bbb2b@@YAXN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Fun@J@?A0xf50bbb2b@@YAXJ@Z DD imagerel ??$Fun@J@?A0xf50bbb2b@@YAXJ@Z
	DD	imagerel ??$Fun@J@?A0xf50bbb2b@@YAXJ@Z+134
	DD	imagerel $unwind$??$Fun@J@?A0xf50bbb2b@@YAXJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
	DD	imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z+147
	DD	imagerel $unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
	DD	imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z+144
	DD	imagerel $unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
	DD	imagerel ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z+103
	DD	imagerel $unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+321
	DD	imagerel $unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+269
	DD	imagerel $unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z
pdata	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_03HJPCDPNA@t?3?$DN@
CONST	SEGMENT
??_C@_03HJPCDPNA@t?3?$DN@ DB 't:=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EBNOBGBO@a?5size_t?3?$DN@
CONST	SEGMENT
??_C@_0L@EBNOBGBO@a?5size_t?3?$DN@ DB 'a size_t:=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAKHEHLG@type?3?$DN@
CONST	SEGMENT
??_C@_06OAKHEHLG@type?3?$DN@ DB 'type:=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EGFGIICL@n?3?$DN@
CONST	SEGMENT
??_C@_03EGFGIICL@n?3?$DN@ DB 'n:=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R0?AU?$IndexTuple@$0A@$00$01@?A0xf50bbb2b@@@8
data$r	SEGMENT
??_R0?AU?$IndexTuple@$0A@$00$01@?A0xf50bbb2b@@@8 DQ FLAT:??_7type_info@@6B@ ; `anonymous namespace'::IndexTuple<0,1,2> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AU?$IndexTuple@$0A@$00$01@?A0xf50bbb2b@@', 00H
data$r	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z DB 060H
	DD	imagerel $ip2state$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z DD 025052e19H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z DD 025053801H
	DD	011c2321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z DD 025053801H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z DD 025053801H
	DD	011c2321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z DD 025053801H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z DD 025053801H
	DD	011c2321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z DD 035053801H
	DD	011c3321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z DD 025053801H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z DD 035053801H
	DD	011c3321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DB 060H
	DD	imagerel $ip2state$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z DD 025053801H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z DD 035053801H
	DD	011c3321H
	DD	070150037H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DB 060H
	DD	imagerel $ip2state$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z DD 035053801H
	DD	011c3321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Fun@J@?A0xf50bbb2b@@YAXJ@Z DD 025052801H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Fun@N@?A0xf50bbb2b@@YAXN@Z DD 025052301H
	DD	010f2314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Fun@H@?A0xf50bbb2b@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z DB 060H
	DD	imagerel $ip2state$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z DD 025053301H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DB 060H
	DD	imagerel $ip2state$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z DB 060H
	DD	imagerel $ip2state$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z DD 035053919H
	DD	011d3322H
	DD	070160031H
	DD	05015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z DD 025053301H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DB 060H
	DD	imagerel $ip2state$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z DB 060H
	DD	imagerel $ip2state$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z DD 035053919H
	DD	011d3322H
	DD	070160037H
	DD	05015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@D@std@@YA$$QEADAEAD@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$forward@D@std@@YA$$QEADAEAD@Z DB 060H
	DD	imagerel $ip2state$??$forward@D@std@@YA$$QEADAEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@D@std@@YA$$QEADAEAD@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$forward@D@std@@YA$$QEADAEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@N@std@@YA$$QEANAEAN@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$forward@N@std@@YA$$QEANAEAN@Z DB 060H
	DD	imagerel $ip2state$??$forward@N@std@@YA$$QEANAEAN@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@N@std@@YA$$QEANAEAN@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$forward@N@std@@YA$$QEANAEAN@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$forward@H@std@@YA$$QEAHAEAH@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$forward@H@std@@YA$$QEAHAEAH@Z DB 060H
	DD	imagerel $ip2state$??$forward@H@std@@YA$$QEAHAEAH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@H@std@@YA$$QEAHAEAH@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$forward@H@std@@YA$$QEAHAEAH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	09eH
	DB	02H
	DB	0f1H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025052a19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@detail@@YA_NZZ DD 025053101H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcName$0 DB 061H ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>
	DB	00H
	ORG $+14
??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcVarDesc DD 028H ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>
	DD	0cH
	DQ	FLAT:??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcName$0
	ORG $+48
??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcFrameData DD 01H ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>
	DD	00H
	DQ	FLAT:??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z DB 060H
	DD	imagerel $ip2state$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z DD 025052f19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MainPrint@?A0xf50bbb2b@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	07003003fH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcName$0 DB 074H	; `anonymous namespace'::MainPrint
	DB	070H
	DB	00H
	ORG $+1
?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcName$1 DB 074H	; `anonymous namespace'::MainPrint
	DB	079H
	DB	070H
	DB	065H
	DB	00H
	ORG $+7
?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcVarDesc DD 074H	; `anonymous namespace'::MainPrint
	DD	01H
	DQ	FLAT:?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcName$0
	ORG $+96
?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcFrameData DD 02H	; `anonymous namespace'::MainPrint
	DD	00H
	DQ	FLAT:?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z DB 060H
	DD	imagerel $ip2state$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z DD 025052f19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z DD 035053901H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TestPrint@?A0xf50bbb2b@@YAXXZ DD 035052f19H
	DD	010a330fH
	DD	07003003fH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	01e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcName$0 DB 074H	; `anonymous namespace'::TestPrint
	DB	070H
	DB	00H
	ORG $+13
?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcVarDesc DD 038H	; `anonymous namespace'::TestPrint
	DD	020H
	DQ	FLAT:?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcName$0
	ORG $+48
?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcFrameData DD 01H	; `anonymous namespace'::TestPrint
	DD	00H
	DQ	FLAT:?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 0aH
	DB	00H
	DB	00H
	DB	0c6H
	DB	02H
	DB	011H, 02H
	DB	04H
	DB	0adH, 0aH
	DB	02H
	DB	0ecH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 025053f19H
	DD	01122317H
	DD	0700b004bH
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	0243H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'9', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	0d1H, 0aH
	DB	02H
	DB	08aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054019H
	DD	01132318H
	DD	0700c0047H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0223H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?name@type_info@@QEBAPEBDXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?name@type_info@@QEBAPEBDXZ DB 060H
	DD	imagerel $ip2state$?name@type_info@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?name@type_info@@QEBAPEBDXZ DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?name@type_info@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DB 060H
	DD	imagerel $ip2state$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025051e19H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DB 060H
	DD	imagerel $ip2state$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 025052f19H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DB 060H
	DD	imagerel $ip2state$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025052a19H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?foo@TupleOp@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?run@TupleOp@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD 025053419H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD 025052f19H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025052f19H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX@Z
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z PROC		; std::_Tuple_val<long>::_Tuple_val<long><int>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	8b 00		 mov	 eax, DWORD PTR [rax]
  00050	89 01		 mov	 DWORD PTR [rcx], eax

; 156  :     }

  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z ENDP		; std::_Tuple_val<long>::_Tuple_val<long><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z PROC		; std::_Tuple_val<char>::_Tuple_val<char><char>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	88 01		 mov	 BYTE PTR [rcx], al

; 156  :     }

  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z ENDP		; std::_Tuple_val<char>::_Tuple_val<char><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z PROC		; std::_Tuple_val<double>::_Tuple_val<double><int>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00047	f2 0f 2a 00	 cvtsi2sd xmm0, DWORD PTR [rax]
  0004b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 156  :     }

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z ENDP		; std::_Tuple_val<double>::_Tuple_val<double><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z
_TEXT	SEGMENT
$T1 = 196
tv81 = 216
this$ = 256
__formal$ = 264
_This_arg$ = 272
??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z PROC ; std::tuple<long>::tuple<long><std::_Exact_args_t,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	f3 aa		 rep stosb
  00052	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00073	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  0007a	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0007f	48 8b d0	 mov	 rdx, rax
  00082	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  00089	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@J@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<long>::_Tuple_val<long><int>

; 243  :     }

  0008e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ENDP ; std::tuple<long>::tuple<long><std::_Exact_args_t,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT

; 214  :     constexpr tuple(_Tag) noexcept { // strengthened, construct from one arg per element

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003a	90		 npad	 1

; 215  :     }

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z PROC		; std::_Tuple_val<short>::_Tuple_val<short><int>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00051	66 89 01	 mov	 WORD PTR [rcx], ax

; 156  :     }

  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z ENDP		; std::_Tuple_val<short>::_Tuple_val<short><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z PROC		; std::_Tuple_val<double>::_Tuple_val<double><double>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00052	f2 0f 11 01	 movsd	 QWORD PTR [rcx], xmm0

; 156  :     }

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z ENDP		; std::_Tuple_val<double>::_Tuple_val<double><double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
tv81 = 216
this$ = 256
__formal$ = 264
_This_arg$ = 272
??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z PROC ; std::tuple<char>::tuple<char><std::_Exact_args_t,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	f3 aa		 rep stosb
  00052	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00073	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  0007a	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  0007f	48 8b d0	 mov	 rdx, rax
  00082	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  00089	e8 00 00 00 00	 call	 ??$?0D@?$_Tuple_val@D@std@@QEAA@$$QEAD@Z ; std::_Tuple_val<char>::_Tuple_val<char><char>

; 243  :     }

  0008e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z ENDP ; std::tuple<char>::tuple<char><std::_Exact_args_t,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv87 = 248
tv80 = 248
this$ = 288
__formal$ = 296
_This_arg$ = 304
<_Rest_arg_0>$ = 312
??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z PROC ; std::tuple<double,long>::tuple<double,long><std::_Exact_args_t,int,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00063	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  0006a	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00071	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00077	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR tv80[rbp]
  0007e	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  00085	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@J@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ; std::tuple<long>::tuple<long><std::_Exact_args_t,int,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00091	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 83 c0 08	 add	 rax, 8
  0009c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  000a3	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000aa	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  000b9	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@N@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<double>::_Tuple_val<double><int>

; 243  :     }

  000be	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ENDP ; std::tuple<double,long>::tuple<double,long><std::_Exact_args_t,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z
_TEXT	SEGMENT
$T1 = 196
tv81 = 216
this$ = 256
__formal$ = 264
_This_arg$ = 272
??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z PROC ; std::tuple<int>::tuple<int><std::_Exact_args_t,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	f3 aa		 rep stosb
  00052	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00073	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  0007a	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0007f	48 8b d0	 mov	 rdx, rax
  00082	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  00089	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  0008e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ENDP ; std::tuple<int>::tuple<int><std::_Exact_args_t,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
tv93 = 280
tv86 = 280
tv83 = 288
this$ = 336
__formal$ = 344
_This_arg$ = 352
<_Rest_arg_0>$ = 360
<_Rest_arg_1>$ = 368
??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z PROC ; std::tuple<short,double,char>::tuple<short,double,char><std::_Exact_args_t,int,double,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00063	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  0006a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00076	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0007d	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00084	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0008a	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  00091	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00097	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  0009e	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR tv83[rbp]
  000a5	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000ac	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z ; std::tuple<double,char>::tuple<double,char><std::_Exact_args_t,double,char,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000b8	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 83 c0 10	 add	 rax, 16
  000c3	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000ca	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000d1	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  000e0	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@F@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<short>::_Tuple_val<short><int>

; 243  :     }

  000e5	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ec	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ENDP ; std::tuple<short,double,char>::tuple<short,double,char><std::_Exact_args_t,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv87 = 248
tv80 = 248
this$ = 288
__formal$ = 296
_This_arg$ = 304
<_Rest_arg_0>$ = 312
??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z PROC ; std::tuple<double,char>::tuple<double,char><std::_Exact_args_t,double,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00063	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  0006a	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00071	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00077	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR tv80[rbp]
  0007e	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  00085	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@D$$V$0A@@?$tuple@D@std@@QEAA@U_Exact_args_t@1@$$QEAD@Z ; std::tuple<char>::tuple<char><std::_Exact_args_t,char,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00091	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 83 c0 08	 add	 rax, 8
  0009c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  000a3	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000aa	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  000b9	e8 00 00 00 00	 call	 ??$?0N@?$_Tuple_val@N@std@@QEAA@$$QEAN@Z ; std::_Tuple_val<double>::_Tuple_val<double><double>

; 243  :     }

  000be	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z ENDP ; std::tuple<double,char>::tuple<double,char><std::_Exact_args_t,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
tv93 = 280
tv86 = 280
tv83 = 288
this$ = 336
__formal$ = 344
_This_arg$ = 352
<_Rest_arg_0>$ = 360
<_Rest_arg_1>$ = 368
??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z PROC ; std::tuple<int,double,long>::tuple<int,double,long><std::_Exact_args_t,int,int,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00063	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  0006a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00076	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0007d	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00084	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0008a	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  00091	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00097	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  0009e	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR tv83[rbp]
  000a5	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000ac	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@NJ@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ; std::tuple<double,long>::tuple<double,long><std::_Exact_args_t,int,int,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000b8	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 83 c0 10	 add	 rax, 16
  000c3	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000ca	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000d1	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  000e0	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  000e5	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ec	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ENDP ; std::tuple<int,double,long>::tuple<int,double,long><std::_Exact_args_t,int,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z PROC	; std::get<2,int,int,int>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]

; 665  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ENDP	; std::get<2,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z PROC	; std::get<1,int,int,int>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 04	 add	 rax, 4

; 665  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ENDP	; std::get<1,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z PROC	; std::get<0,int,int,int>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 08	 add	 rax, 8

; 665  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ENDP	; std::get<0,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv87 = 248
tv80 = 248
this$ = 288
__formal$ = 296
_This_arg$ = 304
<_Rest_arg_0>$ = 312
??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z PROC ; std::tuple<int,int>::tuple<int,int><std::_Exact_args_t,int,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00063	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  0006a	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00071	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00077	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR tv80[rbp]
  0007e	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  00085	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@H$$V$0A@@?$tuple@H@std@@QEAA@U_Exact_args_t@1@$$QEAH@Z ; std::tuple<int>::tuple<int><std::_Exact_args_t,int,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00091	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 83 c0 04	 add	 rax, 4
  0009c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  000a3	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000aa	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  000b9	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  000be	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ENDP ; std::tuple<int,int>::tuple<int,int><std::_Exact_args_t,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv131 = 312
tv92 = 312
tv89 = 320
tv86 = 328
this$ = 368
__formal$ = 376
_This_arg$ = 384
<_Rest_arg_0>$ = 392
<_Rest_arg_1>$ = 400
<_Rest_arg_2>$ = 408
??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z PROC ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Exact_args_t,int,int,double,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_2>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00063	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  0006a	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00076	48 89 85 40 01
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  0007d	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00084	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00089	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  00090	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00097	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0009d	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000a4	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000aa	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000b1	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000b7	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv92[rbp]
  000be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c3	4c 8b 8d 40 01
	00 00		 mov	 r9, QWORD PTR tv89[rbp]
  000ca	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR tv86[rbp]
  000d1	0f b6 95 24 01
	00 00		 movzx	 edx, BYTE PTR $T4[rbp]
  000d8	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000df	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@FND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ; std::tuple<short,double,char>::tuple<short,double,char><std::_Exact_args_t,int,double,char,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000e4	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000eb	48 83 c0 18	 add	 rax, 24
  000ef	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv131[rbp], rax
  000f6	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000fd	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR tv131[rbp]
  0010c	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  00111	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0011f	5f		 pop	 rdi
  00120	5d		 pop	 rbp
  00121	c3		 ret	 0
??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ENDP ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Exact_args_t,int,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z PROC ; std::get<3,int,int,double,char>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]

; 665  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z ENDP ; std::get<3,int,int,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z PROC ; std::get<2,int,int,double,char>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 08	 add	 rax, 8

; 665  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z ENDP ; std::get<2,int,int,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z PROC ; std::get<1,int,int,double,char>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 10	 add	 rax, 16

; 665  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ENDP ; std::get<1,int,int,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z PROC ; std::get<0,int,int,double,char>, COMDAT

; 661  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 662  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 663  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 664  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 18	 add	 rax, 24

; 665  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ENDP ; std::get<0,int,int,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z
_TEXT	SEGMENT
this$ = 224
_Arg$ = 232
??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z PROC		; std::_Tuple_val<int>::_Tuple_val<int><int>, COMDAT

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Arg$[rbp]
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	8b 00		 mov	 eax, DWORD PTR [rax]
  00050	89 01		 mov	 DWORD PTR [rcx], eax

; 156  :     }

  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ENDP		; std::_Tuple_val<int>::_Tuple_val<int><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
tv93 = 280
tv86 = 280
tv83 = 288
this$ = 336
__formal$ = 344
_This_arg$ = 352
<_Rest_arg_0>$ = 360
<_Rest_arg_1>$ = 368
??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z PROC ; std::tuple<int,double,char>::tuple<int,double,char><std::_Exact_args_t,int,double,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00063	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  0006a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00076	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0007d	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00084	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0008a	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  00091	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00097	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  0009e	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR tv83[rbp]
  000a5	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000ac	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@ND$0A@@?$tuple@ND@std@@QEAA@U_Exact_args_t@1@$$QEAN$$QEAD@Z ; std::tuple<double,char>::tuple<double,char><std::_Exact_args_t,double,char,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000b8	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 83 c0 10	 add	 rax, 16
  000c3	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000ca	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000d1	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  000e0	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  000e5	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ec	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ENDP ; std::tuple<int,double,char>::tuple<int,double,char><std::_Exact_args_t,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv94 = 312
tv91 = 320
tv88 = 328
this$ = 368
__formal$ = 376
_Right$ = 384
__formal$ = 392
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z PROC ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0,1,2,0>, COMDAT

; 703  :     : tuple(_Exact_args_t{},

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::forward<std::tuple<int,int,int> >
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ??$get@$01HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<2,int,int,int>
  0006b	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  00072	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00079	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::forward<std::tuple<int,int,int> >
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ??$get@$00HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<1,int,int,int>
  00086	48 89 85 40 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  0008d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00094	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::forward<std::tuple<int,int,int> >
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 ??$get@$0A@HHH@std@@YA$$QEAH$$QEAV?$tuple@HHH@0@@Z ; std::get<0,int,int,int>
  000a1	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  000a8	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  000af	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  000b5	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000bc	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000c2	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000c9	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000cf	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	4c 8b 8d 40 01
	00 00		 mov	 r9, QWORD PTR tv91[rbp]
  000e2	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR tv88[rbp]
  000e9	0f b6 95 24 01
	00 00		 movzx	 edx, BYTE PTR $T4[rbp]
  000f0	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HNJ@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Exact_args_t,int,int,int,0>

; 704  :         _STD get<_Indices>(_STD forward<_Tpl>(_Right))...) { // construct from unpacking a tuple/pair, using get<I>()
; 705  : }

  000fc	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00103	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0010a	5f		 pop	 rdi
  0010b	5d		 pop	 rbp
  0010c	c3		 ret	 0
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z ENDP ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0,1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z PROC ; std::forward<std::tuple<int,int,int> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1422 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ENDP ; std::forward<std::tuple<int,int,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
tv93 = 280
tv86 = 280
tv83 = 288
this$ = 336
__formal$ = 344
_This_arg$ = 352
<_Rest_arg_0>$ = 360
<_Rest_arg_1>$ = 368
??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z PROC ; std::tuple<int,int,int>::tuple<int,int,int><std::_Exact_args_t,int,int,int,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00063	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  0006a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00076	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0007d	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00084	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0008a	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  00091	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00097	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv86[rbp]
  0009e	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR tv83[rbp]
  000a5	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000ac	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HH$0A@@?$tuple@HH@std@@QEAA@U_Exact_args_t@1@$$QEAH1@Z ; std::tuple<int,int>::tuple<int,int><std::_Exact_args_t,int,int,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000b8	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 83 c0 08	 add	 rax, 8
  000c3	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000ca	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000d1	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  000e0	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  000e5	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ec	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ENDP ; std::tuple<int,int,int>::tuple<int,int,int><std::_Exact_args_t,int,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
tv134 = 344
tv131 = 352
tv128 = 360
tv93 = 368
this$ = 416
__formal$ = 424
_Right$ = 432
__formal$ = 440
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z PROC ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0,1,2,3,0>, COMDAT

; 703  :     : tuple(_Exact_args_t{},

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ??$get@$02HHND@std@@YA$$QEAD$$QEAV?$tuple@HHND@0@@Z ; std::get<3,int,int,double,char>
  0006b	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  00072	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00079	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ??$get@$01HHND@std@@YA$$QEAN$$QEAV?$tuple@HHND@0@@Z ; std::get<2,int,int,double,char>
  00086	48 89 85 60 01
	00 00		 mov	 QWORD PTR tv131[rbp], rax
  0008d	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00094	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 ??$get@$00HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ; std::get<1,int,int,double,char>
  000a1	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv128[rbp], rax
  000a8	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  000af	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	e8 00 00 00 00	 call	 ??$get@$0A@HHND@std@@YA$$QEAH$$QEAV?$tuple@HHND@0@@Z ; std::get<0,int,int,double,char>
  000bc	48 89 85 70 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000c3	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  000ca	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  000d0	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000d7	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000dd	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000e4	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000ea	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR $T4[rbp]
  000f1	88 85 44 01 00
	00		 mov	 BYTE PTR $T5[rbp], al
  000f7	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv134[rbp]
  000fe	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00103	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR tv131[rbp]
  0010a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010f	4c 8b 8d 68 01
	00 00		 mov	 r9, QWORD PTR tv128[rbp]
  00116	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR tv93[rbp]
  0011d	0f b6 95 44 01
	00 00		 movzx	 edx, BYTE PTR $T5[rbp]
  00124	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012b	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HFND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Exact_args_t,int,int,double,char,0>

; 704  :         _STD get<_Indices>(_STD forward<_Tpl>(_Right))...) { // construct from unpacking a tuple/pair, using get<I>()
; 705  : }

  00130	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00137	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0013e	5f		 pop	 rdi
  0013f	5d		 pop	 rbp
  00140	c3		 ret	 0
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z ENDP ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0,1,2,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z PROC ; std::forward<std::tuple<int,int,double,char> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1422 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ENDP ; std::forward<std::tuple<int,int,double,char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv131 = 312
tv92 = 312
tv89 = 320
tv86 = 328
this$ = 368
__formal$ = 376
_This_arg$ = 384
<_Rest_arg_0>$ = 392
<_Rest_arg_1>$ = 400
<_Rest_arg_2>$ = 408
??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z PROC ; std::tuple<int,int,double,char>::tuple<int,int,double,char><std::_Exact_args_t,int,int,double,char,0>, COMDAT

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00044	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f3 aa		 rep stosb
  00057	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_2>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00063	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  0006a	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  00071	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00076	48 89 85 40 01
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  0007d	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00084	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00089	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  00090	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  00097	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  0009d	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000a4	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000aa	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000b1	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000b7	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv92[rbp]
  000be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c3	4c 8b 8d 40 01
	00 00		 mov	 r9, QWORD PTR tv89[rbp]
  000ca	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR tv86[rbp]
  000d1	0f b6 95 24 01
	00 00		 movzx	 edx, BYTE PTR $T4[rbp]
  000d8	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000df	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HND$0A@@?$tuple@HND@std@@QEAA@U_Exact_args_t@1@$$QEAH$$QEAN$$QEAD@Z ; std::tuple<int,double,char>::tuple<int,double,char><std::_Exact_args_t,int,double,char,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  000e4	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000eb	48 83 c0 18	 add	 rax, 24
  000ef	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv131[rbp], rax
  000f6	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  000fd	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR tv131[rbp]
  0010c	e8 00 00 00 00	 call	 ??$?0H@?$_Tuple_val@H@std@@QEAA@$$QEAH@Z ; std::_Tuple_val<int>::_Tuple_val<int><int>

; 243  :     }

  00111	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0011f	5f		 pop	 rdi
  00120	5d		 pop	 rbp
  00121	c3		 ret	 0
??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ENDP ; std::tuple<int,int,double,char>::tuple<int,int,double,char><std::_Exact_args_t,int,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z PROC	; std::get<0,int,short,double,char>, COMDAT

; 655  : _NODISCARD constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(const tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 656  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 657  :     return static_cast<const _Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 18	 add	 rax, 24

; 658  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z ENDP	; std::get<0,int,short,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z PROC	; std::get<1,int,short,double,char>, COMDAT

; 655  : _NODISCARD constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(const tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 656  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 657  :     return static_cast<const _Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 10	 add	 rax, 16

; 658  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z ENDP	; std::get<1,int,short,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
_TEXT	SEGMENT
tv70 = 192
t$ = 240
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z PROC ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,1>::print, COMDAT

; 24   : 		static void print(const Tuple& t) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 25   : 			std::cout << std::get<0>(t);

  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$get@$0A@HFND@std@@YAAEBHAEBV?$tuple@HFND@0@@Z ; std::get<0,int,short,double,char>
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  0004a	8b 95 c0 00 00
	00		 mov	 edx, DWORD PTR tv70[rbp]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 26   : 		}

  0005d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ENDP ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,1>::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z PROC	; std::get<2,int,short,double,char>, COMDAT

; 655  : _NODISCARD constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(const tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 656  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 657  :     return static_cast<const _Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 08	 add	 rax, 8

; 658  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z ENDP	; std::get<2,int,short,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
_TEXT	SEGMENT
tv76 = 192
tv74 = 200
t$ = 240
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z PROC ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,2>::print, COMDAT

; 16   : 		{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 17   : 			TuplePrinter<Tuple, N - 1>::print(t);

  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  0003d	e8 00 00 00 00	 call	 ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$00@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,1>::print

; 18   : 			std::cout << ", " << std::get<N - 1>(t);

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00050	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00055	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  00063	e8 00 00 00 00	 call	 ??$get@$00HFND@std@@YAAEBFAEBV?$tuple@HFND@0@@Z ; std::get<1,int,short,double,char>
  00068	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0006b	66 89 85 c8 00
	00 00		 mov	 WORD PTR tv74[rbp], ax
  00072	0f b7 95 c8 00
	00 00		 movzx	 edx, WORD PTR tv74[rbp]
  00079	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@F@Z

; 19   : 		}

  00086	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0008d	5f		 pop	 rdi
  0008e	5d		 pop	 rbp
  0008f	c3		 ret	 0
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ENDP ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,2>::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z PROC	; std::get<3,int,short,double,char>, COMDAT

; 655  : _NODISCARD constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(const tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 656  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 657  :     return static_cast<const _Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]

; 658  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z ENDP	; std::get<3,int,short,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
_TEXT	SEGMENT
tv76 = 192
tv74 = 200
t$ = 240
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z PROC ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,3>::print, COMDAT

; 16   : 		{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 17   : 			TuplePrinter<Tuple, N - 1>::print(t);

  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  0003d	e8 00 00 00 00	 call	 ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$01@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,2>::print

; 18   : 			std::cout << ", " << std::get<N - 1>(t);

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00050	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00055	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  00063	e8 00 00 00 00	 call	 ??$get@$01HFND@std@@YAAEBNAEBV?$tuple@HFND@0@@Z ; std::get<2,int,short,double,char>
  00068	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  0006c	f2 0f 11 85 c8
	00 00 00	 movsd	 QWORD PTR tv74[rbp], xmm0
  00074	f2 0f 10 8d c8
	00 00 00	 movsd	 xmm1, QWORD PTR tv74[rbp]
  0007c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z

; 19   : 		}

  00089	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00090	5f		 pop	 rdi
  00091	5d		 pop	 rbp
  00092	c3		 ret	 0
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ENDP ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,3>::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ??$Fun@J@?A0xf50bbb2b@@YAXJ@Z
_TEXT	SEGMENT
tv71 = 192
tv76 = 200
t$ = 240
??$Fun@J@?A0xf50bbb2b@@YAXJ@Z PROC			; `anonymous namespace'::Fun<long>, COMDAT

; 71   : 	{

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 72   : 		std::cout << "t:=" << t << std::endl;

  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HJPCDPNA@t?3?$DN@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00042	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0004e	8b 95 f0 00 00
	00		 mov	 edx, DWORD PTR t$[rbp]
  00054	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@J@Z
  00061	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0006f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 73   : 	}

  0007c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
??$Fun@J@?A0xf50bbb2b@@YAXJ@Z ENDP			; `anonymous namespace'::Fun<long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z PROC	; std::get<2,int,double,long>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]

; 652  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z ENDP	; std::get<2,int,double,long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ??$Fun@N@?A0xf50bbb2b@@YAXN@Z
_TEXT	SEGMENT
tv71 = 192
tv76 = 200
t$ = 240
??$Fun@N@?A0xf50bbb2b@@YAXN@Z PROC			; `anonymous namespace'::Fun<double>, COMDAT

; 71   : 	{

  00000	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 72   : 		std::cout << "t:=" << t << std::endl;

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HJPCDPNA@t?3?$DN@
  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0003d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00042	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00049	f2 0f 10 8d f0
	00 00 00	 movsd	 xmm1, QWORD PTR t$[rbp]
  00051	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
  0005e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0006c	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 73   : 	}

  00079	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
??$Fun@N@?A0xf50bbb2b@@YAXN@Z ENDP			; `anonymous namespace'::Fun<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z PROC	; std::get<1,int,double,long>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 08	 add	 rax, 8

; 652  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z ENDP	; std::get<1,int,double,long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ??$Fun@H@?A0xf50bbb2b@@YAXH@Z
_TEXT	SEGMENT
tv71 = 192
tv76 = 200
t$ = 240
??$Fun@H@?A0xf50bbb2b@@YAXH@Z PROC			; `anonymous namespace'::Fun<int>, COMDAT

; 71   : 	{

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 72   : 		std::cout << "t:=" << t << std::endl;

  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HJPCDPNA@t?3?$DN@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00042	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0004e	8b 95 f0 00 00
	00		 mov	 edx, DWORD PTR t$[rbp]
  00054	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00061	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0006f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 73   : 	}

  0007c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
??$Fun@H@?A0xf50bbb2b@@YAXH@Z ENDP			; `anonymous namespace'::Fun<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z
_TEXT	SEGMENT
_Tuple$ = 224
??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z PROC	; std::get<0,int,double,long>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Tuple$[rbp]
  0003e	48 83 c0 10	 add	 rax, 16

; 652  : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z ENDP	; std::get<0,int,double,long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv81 = 312
this$ = 352
__formal$ = 360
_Right$ = 368
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z PROC ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0>, COMDAT

; 250  :         : tuple(_Unpack_tuple_t{}, _STD forward<_Tpl>(_Right),

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	f3 aa		 rep stosb
  00052	48 8d 85 e4 00
	00 00		 lea	 rax, QWORD PTR $T2[rbp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	33 c0		 xor	 eax, eax
  0005e	b9 01 00 00 00	 mov	 ecx, 1
  00063	f3 aa		 rep stosb
  00065	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0006c	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  00072	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00079	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::forward<std::tuple<int,int,int> >
  0007e	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00085	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  0008c	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00092	44 0f b6 8d 24
	01 00 00	 movzx	 r9d, BYTE PTR $T4[rbp]
  0009a	4c 8b 85 38 01
	00 00		 mov	 r8, QWORD PTR tv81[rbp]
  000a1	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000a8	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	e8 00 00 00 00	 call	 ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@$00$01$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@U?$integer_sequence@_K$0A@$00$01@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0,1,2,0>

; 251  :             make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{}) { // construct from unpacking a tuple/pair
; 252  :     }

  000b4	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z ENDP ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z PROC ; std::move<std::tuple<int,int,int> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1434 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ENDP ; std::move<std::tuple<int,int,int> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv88 = 312
tv85 = 320
tv82 = 328
this$ = 368
_This_arg$ = 376
<_Rest_arg_0>$ = 384
<_Rest_arg_1>$ = 392
??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z PROC	; std::tuple<int,int,int>::tuple<int,int,int><int,int,int,0>, COMDAT

; 310  :         : tuple(_Exact_args_t{}, _STD forward<_This2>(_This_arg), _STD forward<_Rest2>(_Rest_arg)...) {}

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00045	90		 npad	 1
  00046	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004d	48 8b f8	 mov	 rdi, rax
  00050	33 c0		 xor	 eax, eax
  00052	b9 01 00 00 00	 mov	 ecx, 1
  00057	f3 aa		 rep stosb
  00059	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  00060	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00065	90		 npad	 1
  00066	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0006d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00074	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00079	90		 npad	 1
  0007a	48 89 85 40 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  00081	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  00088	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0008d	90		 npad	 1
  0008e	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  00095	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0009c	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  000a2	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000a9	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000af	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000b6	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000bc	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	4c 8b 8d 40 01
	00 00		 mov	 r9, QWORD PTR tv85[rbp]
  000cf	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR tv82[rbp]
  000d6	0f b6 95 24 01
	00 00		 movzx	 edx, BYTE PTR $T4[rbp]
  000dd	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e4	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HHH$0A@@?$tuple@HHH@std@@QEAA@U_Exact_args_t@1@$$QEAH11@Z ; std::tuple<int,int,int>::tuple<int,int,int><std::_Exact_args_t,int,int,int,0>
  000e9	90		 npad	 1
  000ea	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f1	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z ENDP	; std::tuple<int,int,int>::tuple<int,int,int><int,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z
_TEXT	SEGMENT
tv74 = 192
tv76 = 200
t$ = 240
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z PROC ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,4>::print, COMDAT

; 16   : 		{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 17   : 			TuplePrinter<Tuple, N - 1>::print(t);

  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  0003d	e8 00 00 00 00	 call	 ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$02@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,3>::print

; 18   : 			std::cout << ", " << std::get<N - 1>(t);

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00050	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00055	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  00063	e8 00 00 00 00	 call	 ??$get@$02HFND@std@@YAAEBDAEBV?$tuple@HFND@0@@Z ; std::get<3,int,short,double,char>
  00068	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006b	88 85 c8 00 00
	00		 mov	 BYTE PTR tv76[rbp], al
  00071	0f b6 95 c8 00
	00 00		 movzx	 edx, BYTE PTR tv76[rbp]
  00078	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv74[rbp]
  0007f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 19   : 		}

  00084	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ENDP ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,4>::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv81 = 312
this$ = 352
__formal$ = 360
_Right$ = 368
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z PROC ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0>, COMDAT

; 250  :         : tuple(_Unpack_tuple_t{}, _STD forward<_Tpl>(_Right),

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	f3 aa		 rep stosb
  00052	48 8d 85 e4 00
	00 00		 lea	 rax, QWORD PTR $T2[rbp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	33 c0		 xor	 eax, eax
  0005e	b9 01 00 00 00	 mov	 ecx, 1
  00063	f3 aa		 rep stosb
  00065	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0006c	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  00072	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00079	e8 00 00 00 00	 call	 ??$forward@V?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::forward<std::tuple<int,int,double,char> >
  0007e	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00085	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  0008c	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  00092	44 0f b6 8d 24
	01 00 00	 movzx	 r9d, BYTE PTR $T4[rbp]
  0009a	4c 8b 85 38 01
	00 00		 mov	 r8, QWORD PTR tv81[rbp]
  000a1	0f b6 95 04 01
	00 00		 movzx	 edx, BYTE PTR $T3[rbp]
  000a8	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	e8 00 00 00 00	 call	 ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@$00$01$02$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@U?$integer_sequence@_K$0A@$00$01$02@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0,1,2,3,0>

; 251  :             make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{}) { // construct from unpacking a tuple/pair
; 252  :     }

  000b4	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z ENDP ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z PROC ; std::move<std::tuple<int,int,double,char> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1434 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ENDP ; std::move<std::tuple<int,int,double,char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
tv94 = 344
tv91 = 352
tv88 = 360
tv85 = 368
this$ = 416
_This_arg$ = 424
<_Rest_arg_0>$ = 432
<_Rest_arg_1>$ = 440
<_Rest_arg_2>$ = 448
??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z PROC ; std::tuple<int,int,double,char>::tuple<int,int,double,char><int,int,double,char,0>, COMDAT

; 310  :         : tuple(_Exact_args_t{}, _STD forward<_This2>(_This_arg), _STD forward<_Rest2>(_Rest_arg)...) {}

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00045	90		 npad	 1
  00046	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0004d	48 8b f8	 mov	 rdi, rax
  00050	33 c0		 xor	 eax, eax
  00052	b9 01 00 00 00	 mov	 ecx, 1
  00057	f3 aa		 rep stosb
  00059	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_2>$[rbp]
  00060	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00065	90		 npad	 1
  00066	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0006d	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_1>$[rbp]
  00074	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00079	90		 npad	 1
  0007a	48 89 85 60 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00081	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR <_Rest_arg_0>$[rbp]
  00088	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0008d	90		 npad	 1
  0008e	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  00095	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR _This_arg$[rbp]
  0009c	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  000a1	90		 npad	 1
  000a2	48 89 85 70 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000a9	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  000b0	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  000b6	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR $T2[rbp]
  000bd	88 85 04 01 00
	00		 mov	 BYTE PTR $T3[rbp], al
  000c3	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T3[rbp]
  000ca	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  000d0	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR $T4[rbp]
  000d7	88 85 44 01 00
	00		 mov	 BYTE PTR $T5[rbp], al
  000dd	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  000e4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR tv91[rbp]
  000f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f5	4c 8b 8d 68 01
	00 00		 mov	 r9, QWORD PTR tv88[rbp]
  000fc	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR tv85[rbp]
  00103	0f b6 95 44 01
	00 00		 movzx	 edx, BYTE PTR $T5[rbp]
  0010a	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00111	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@HHND$0A@@?$tuple@HHND@std@@QEAA@U_Exact_args_t@1@$$QEAH1$$QEAN$$QEAD@Z ; std::tuple<int,int,double,char>::tuple<int,int,double,char><std::_Exact_args_t,int,int,double,char,0>
  00116	90		 npad	 1
  00117	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011e	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  00125	5f		 pop	 rdi
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z ENDP ; std::tuple<int,int,double,char>::tuple<int,int,double,char><int,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@D@std@@YA$$QEADAEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@D@std@@YA$$QEADAEAD@Z PROC			; std::forward<char>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1422 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$forward@D@std@@YA$$QEADAEAD@Z ENDP			; std::forward<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@N@std@@YA$$QEANAEAN@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@N@std@@YA$$QEANAEAN@Z PROC			; std::forward<double>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1422 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$forward@N@std@@YA$$QEANAEAN@Z ENDP			; std::forward<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@H@std@@YA$$QEAHAEAH@Z PROC			; std::forward<int>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C8593937_type_traits
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1422 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$forward@H@std@@YA$$QEAHAEAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 130  :         explicit __CLR_OR_THIS_CALL operator bool() const { // test if stream state okay

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :             return _Ok;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 132  :         }

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 115  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 116  : #if _HAS_EXCEPTIONS
; 117  :             if (!_STD uncaught_exception()) { // TRANSITION, OS#15518458

  00037	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0003c	90		 npad	 1
  0003d	0f b6 c0	 movzx	 eax, al
  00040	85 c0		 test	 eax, eax
  00042	75 11		 jne	 SHORT $LN2@sentry

; 118  :                 this->_Myostr._Osfx();

  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00054	90		 npad	 1
$LN2@sentry:

; 119  :             }
; 120  : #else // _HAS_EXCEPTIONS
; 121  :             this->_Myostr._Osfx();
; 122  : #endif // _HAS_EXCEPTIONS
; 123  :         }

  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00061	90		 npad	 1
  00062	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr)

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :             : _Sentry_base(_Ostr) { // construct locking and testing stream

  0003b	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	90		 npad	 1

; 92   :             if (!_Ostr.good()) {

  0004f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00073	0f b6 c0	 movzx	 eax, al
  00076	85 c0		 test	 eax, eax
  00078	75 10		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 94   :                 return;

  00085	e9 81 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  0008a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00091	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00094	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00098	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0009f	48 03 c8	 add	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ae	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000b2	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000b7	74 0d		 je	 SHORT $LN4@sentry
  000b9	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c0	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000c4	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000c6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cd	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 100  :                 return;

  000d1	eb 38		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  : 
; 104  :             _Tied->flush();

  000d3	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000dd	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000e4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000eb	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00101	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00108	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  0010b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00112	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00119	5f		 pop	 rdi
  0011a	5d		 pop	 rbp
  0011b	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 76   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00037	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00048	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00056	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
  00063	48 8b c8	 mov	 rcx, rax
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006c	90		 npad	 1
  0006d	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 78   :             if (_Rdbuf) {

  00071	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00076	74 0f		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Unlock();

  00078	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00083	ff 50 10	 call	 QWORD PTR [rax+16]
  00086	90		 npad	 1
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx

; 70   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  0005d	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0006b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00072	48 03 c8	 add	 rcx, rax
  00075	48 8b c1	 mov	 rax, rcx
  00078	48 8b c8	 mov	 rcx, rax
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00081	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 71   :             if (_Rdbuf) {

  00085	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0008a	74 0e		 je	 SHORT $LN2@Sentry_bas

; 72   :                 _Rdbuf->_Lock();

  0008c	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00090	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00093	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00097	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 73   :             }
; 74   :         }

  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?compare@detail@@YA_NZZ
_TEXT	SEGMENT
?compare@detail@@YA_NZZ PROC				; detail::compare, COMDAT

; 100  : 	{

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 101  : 		return false;

  0003d	32 c0		 xor	 al, al

; 102  : 	}

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?compare@detail@@YA_NZZ ENDP				; detail::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z
_TEXT	SEGMENT
a$ = 8
tv80 = 232
tv85 = 240
in$ = 288
tp$ = 296
??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z PROC ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>, COMDAT

; 76   : 	{

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 77   : 		int a[] = { (Fun(std::get<Indexes>(tp)), 0)...};

  0003b	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR tp$[rbp]
  00042	e8 00 00 00 00	 call	 ??$get@$0A@HNJ@std@@YAAEAHAEAV?$tuple@HNJ@0@@Z ; std::get<0,int,double,long>
  00047	8b 08		 mov	 ecx, DWORD PTR [rax]
  00049	e8 00 00 00 00	 call	 ??$Fun@H@?A0xf50bbb2b@@YAXH@Z ; `anonymous namespace'::Fun<int>
  0004e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR a$[rbp], 0
  00055	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR tp$[rbp]
  0005c	e8 00 00 00 00	 call	 ??$get@$00HNJ@std@@YAAEANAEAV?$tuple@HNJ@0@@Z ; std::get<1,int,double,long>
  00061	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00065	e8 00 00 00 00	 call	 ??$Fun@N@?A0xf50bbb2b@@YAXN@Z ; `anonymous namespace'::Fun<double>
  0006a	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR a$[rbp+4], 0
  00071	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR tp$[rbp]
  00078	e8 00 00 00 00	 call	 ??$get@$01HNJ@std@@YAAEAJAEAV?$tuple@HNJ@0@@Z ; std::get<2,int,double,long>
  0007d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0007f	e8 00 00 00 00	 call	 ??$Fun@J@?A0xf50bbb2b@@YAXJ@Z ; `anonymous namespace'::Fun<long>
  00084	c7 45 10 00 00
	00 00		 mov	 DWORD PTR a$[rbp+8], 0

; 78   : 		std::cout << "a size_t:=" << sizeof(a) / sizeof(int) << std::endl;

  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EBNOBGBO@a?5size_t?3?$DN@
  00092	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00099	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0009e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  000a5	ba 03 00 00 00	 mov	 edx, 3
  000aa	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z
  000b7	48 89 85 f0 00
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000c5	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 79   : 	}

  000d2	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z$rtcFrameData
  000dd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e2	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000e9	5f		 pop	 rdi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z ENDP ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
tv80 = 192
_Ostr$ = 240
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 950  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 951  :     _Ostr.put(_Ostr.widen('\n'));

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00044	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004b	48 03 c8	 add	 rcx, rax
  0004e	48 8b c1	 mov	 rax, rcx
  00051	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00058	b2 0a		 mov	 dl, 10
  0005a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00067	0f b6 d0	 movzx	 edx, al
  0006a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 952  :     _Ostr.flush();

  00077	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 953  :     return _Ostr;

  00084	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 954  : }

  0008b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv76 = 248
this$ = 288
_Right$ = 296
??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z PROC ; std::tuple<int,double,long>::tuple<int,double,long><int,int,int,0>, COMDAT

; 342  :         : tuple(_Unpack_tuple_t{}, _STD move(_Right)) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00043	48 8b f8	 mov	 rdi, rax
  00046	33 c0		 xor	 eax, eax
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	f3 aa		 rep stosb
  0004f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00056	e8 00 00 00 00	 call	 ??$move@AEAV?$tuple@HHH@std@@@std@@YA$$QEAV?$tuple@HHH@0@AEAV10@@Z ; std::move<std::tuple<int,int,int> &>
  0005b	90		 npad	 1
  0005c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00063	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0006a	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00070	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR tv76[rbp]
  00077	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  0007e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00085	e8 00 00 00 00	 call	 ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHH@1@$0A@@?$tuple@HNJ@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHH@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><std::_Unpack_tuple_t,std::tuple<int,int,int>,0>
  0008a	90		 npad	 1
  0008b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z ENDP ; std::tuple<int,double,long>::tuple<int,double,long><int,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z
_TEXT	SEGMENT
tv80 = 192
tv78 = 200
tv76 = 208
__$ReturnUdt$ = 256
<_Args_0>$ = 264
<_Args_1>$ = 272
<_Args_2>$ = 280
??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z PROC ; std::make_tuple<int,int,int>, COMDAT

; 718  : _NODISCARD constexpr tuple<_Unrefwrap_t<_Types>...> make_tuple(_Types&&... _Args) { // make tuple from elements

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 719  :     using _Ttype = tuple<_Unrefwrap_t<_Types>...>;
; 720  :     return _Ttype(_STD forward<_Types>(_Args)...);

  00045	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR <_Args_2>$[rbp]
  0004c	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00051	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00058	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00064	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  0006b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00072	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00077	48 89 85 d0 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0007e	4c 8b 8d c0 00
	00 00		 mov	 r9, QWORD PTR tv80[rbp]
  00085	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR tv78[rbp]
  0008c	48 8b 95 d0 00
	00 00		 mov	 rdx, QWORD PTR tv76[rbp]
  00093	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0009a	e8 00 00 00 00	 call	 ??$?0HHH$0A@@?$tuple@HHH@std@@QEAA@$$QEAH00@Z ; std::tuple<int,int,int>::tuple<int,int,int><int,int,int,0>
  0009f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 721  : }

  000a6	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ad	5f		 pop	 rdi
  000ae	5d		 pop	 rbp
  000af	c3		 ret	 0
??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z ENDP ; std::make_tuple<int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?MainPrint@?A0xf50bbb2b@@YAXXZ
_TEXT	SEGMENT
tp$ = 8
n$ = 56
type$ = 84
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
tv92 = 424
tv78 = 424
tv94 = 432
tv83 = 432
tv131 = 440
__$ArrayPad$ = 448
?MainPrint@?A0xf50bbb2b@@YAXXZ PROC			; `anonymous namespace'::MainPrint, COMDAT

; 81   : 	{

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 c0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 82   : 		using Tuple = std::tuple<int, double, long>;
; 83   : 		Tuple tp = std::make_tuple(1,2,3);

  0003b	c7 85 34 01 00
	00 03 00 00 00	 mov	 DWORD PTR $T5[rbp], 3
  00045	c7 85 54 01 00
	00 02 00 00 00	 mov	 DWORD PTR $T6[rbp], 2
  0004f	c7 85 74 01 00
	00 01 00 00 00	 mov	 DWORD PTR $T7[rbp], 1
  00059	4c 8d 8d 34 01
	00 00		 lea	 r9, QWORD PTR $T5[rbp]
  00060	4c 8d 85 54 01
	00 00		 lea	 r8, QWORD PTR $T6[rbp]
  00067	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  0006e	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00075	e8 00 00 00 00	 call	 ??$make_tuple@HHH@std@@YA?AV?$tuple@HHH@0@$$QEAH00@Z ; std::make_tuple<int,int,int>
  0007a	48 8b d0	 mov	 rdx, rax
  0007d	48 8d 4d 08	 lea	 rcx, QWORD PTR tp$[rbp]
  00081	e8 00 00 00 00	 call	 ??$?0HHH$0A@@?$tuple@HNJ@std@@QEAA@$$QEAV?$tuple@HHH@1@@Z ; std::tuple<int,double,long>::tuple<int,double,long><int,int,int,0>

; 84   : 		auto n = std::tuple_size<Tuple>::value;

  00086	48 c7 45 38 03
	00 00 00	 mov	 QWORD PTR n$[rbp], 3

; 85   : 		std::cout << "n:=" << n << std::endl;

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EGFGIICL@n?3?$DN@
  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0009c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000a1	48 89 85 a8 01
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  000a8	48 8b 55 38	 mov	 rdx, QWORD PTR n$[rbp]
  000ac	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR tv78[rbp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z
  000b9	48 89 85 b0 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000c7	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR tv83[rbp]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 86   : 		auto type = MakeIndexes<std::tuple_size<Tuple>::value>::type();
; 87   : 		std::cout << "type:=" << typeid(type).name() << std::endl;

  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OAKHEHLG@type?3?$DN@
  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000e7	48 89 85 a8 01
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_R0?AU?$IndexTuple@$0A@$00$01@?A0xf50bbb2b@@@8
  000f5	e8 00 00 00 00	 call	 ?name@type_info@@QEBAPEBDXZ ; type_info::name
  000fa	48 89 85 b0 01
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  00101	48 8b 95 b0 01
	00 00		 mov	 rdx, QWORD PTR tv94[rbp]
  00108	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR tv92[rbp]
  0010f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00114	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv131[rbp], rax
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00122	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv131[rbp]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 88   : 		Transform(type, tp);

  0012f	48 8d 55 08	 lea	 rdx, QWORD PTR tp$[rbp]
  00133	48 8d 4d 54	 lea	 rcx, QWORD PTR type$[rbp]
  00137	e8 00 00 00 00	 call	 ??$Transform@V?$tuple@HNJ@std@@$0A@$00$01@?A0xf50bbb2b@@YAXAEAU?$IndexTuple@$0A@$00$01@0@AEAV?$tuple@HNJ@std@@@Z ; `anonymous namespace'::Transform<std::tuple<int,double,long>,0,1,2>

; 89   : 	}

  0013c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MainPrint@?A0xf50bbb2b@@YAXXZ$rtcFrameData
  00147	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0014c	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00153	48 33 cd	 xor	 rcx, rbp
  00156	e8 00 00 00 00	 call	 __security_check_cookie
  0015b	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  00162	5f		 pop	 rdi
  00163	5d		 pop	 rbp
  00164	c3		 ret	 0
?MainPrint@?A0xf50bbb2b@@YAXXZ ENDP			; `anonymous namespace'::MainPrint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z
_TEXT	SEGMENT
t$ = 224
??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z PROC ; `anonymous namespace'::PrintTuple<int,short,double,char>, COMDAT

; 30   : 	{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 31   : 		std::cout << "(";

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00044	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 32   : 		TuplePrinter<decltype(t), sizeof...(Args)>::print(t);

  00049	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR t$[rbp]
  00050	e8 00 00 00 00	 call	 ?print@?$TuplePrinter@AEBV?$tuple@HFND@std@@$03@?A0xf50bbb2b@@SAXAEBV?$tuple@HFND@std@@@Z ; `anonymous namespace'::TuplePrinter<std::tuple<int,short,double,char> const &,4>::print

; 33   : 		std::cout << ")\n";

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MNMNLDAI@?$CJ?6@
  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00063	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 34   : 	}

  00068	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z ENDP ; `anonymous namespace'::PrintTuple<int,short,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv76 = 248
this$ = 288
_Right$ = 296
??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z PROC ; std::tuple<int,short,double,char>::tuple<int,short,double,char><int,int,double,char,0>, COMDAT

; 342  :         : tuple(_Unpack_tuple_t{}, _STD move(_Right)) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00043	48 8b f8	 mov	 rdi, rax
  00046	33 c0		 xor	 eax, eax
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	f3 aa		 rep stosb
  0004f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00056	e8 00 00 00 00	 call	 ??$move@AEAV?$tuple@HHND@std@@@std@@YA$$QEAV?$tuple@HHND@0@AEAV10@@Z ; std::move<std::tuple<int,int,double,char> &>
  0005b	90		 npad	 1
  0005c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00063	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR $T1[rbp]
  0006a	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00070	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR tv76[rbp]
  00077	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T2[rbp]
  0007e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00085	e8 00 00 00 00	 call	 ??$?0U_Unpack_tuple_t@std@@V?$tuple@HHND@1@$0A@@?$tuple@HFND@std@@QEAA@U_Unpack_tuple_t@1@$$QEAV?$tuple@HHND@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><std::_Unpack_tuple_t,std::tuple<int,int,double,char>,0>
  0008a	90		 npad	 1
  0008b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z ENDP ; std::tuple<int,short,double,char>::tuple<int,short,double,char><int,int,double,char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z
_TEXT	SEGMENT
tv85 = 192
tv83 = 200
tv81 = 208
tv79 = 216
__$ReturnUdt$ = 256
<_Args_0>$ = 264
<_Args_1>$ = 272
<_Args_2>$ = 280
<_Args_3>$ = 288
??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z PROC ; std::make_tuple<int,int,double,char>, COMDAT

; 718  : _NODISCARD constexpr tuple<_Unrefwrap_t<_Types>...> make_tuple(_Types&&... _Args) { // make tuple from elements

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D64083BB_tuple
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 719  :     using _Ttype = tuple<_Unrefwrap_t<_Types>...>;
; 720  :     return _Ttype(_STD forward<_Types>(_Args)...);

  00045	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR <_Args_3>$[rbp]
  0004c	e8 00 00 00 00	 call	 ??$forward@D@std@@YA$$QEADAEAD@Z ; std::forward<char>
  00051	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  00058	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR <_Args_2>$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QEANAEAN@Z ; std::forward<double>
  00064	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0006b	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  00072	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00077	48 89 85 d0 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  0007e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00085	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0008a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  00091	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv85[rbp]
  00098	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009d	4c 8b 8d c8 00
	00 00		 mov	 r9, QWORD PTR tv83[rbp]
  000a4	4c 8b 85 d0 00
	00 00		 mov	 r8, QWORD PTR tv81[rbp]
  000ab	48 8b 95 d8 00
	00 00		 mov	 rdx, QWORD PTR tv79[rbp]
  000b2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000b9	e8 00 00 00 00	 call	 ??$?0HHND$0A@@?$tuple@HHND@std@@QEAA@$$QEAH0$$QEAN$$QEAD@Z ; std::tuple<int,int,double,char>::tuple<int,int,double,char><int,int,double,char,0>
  000be	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 721  : }

  000c5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z ENDP ; std::make_tuple<int,int,double,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?TestPrint@?A0xf50bbb2b@@YAXXZ
_TEXT	SEGMENT
tp$ = 8
$T4 = 260
$T5 = 296
$T6 = 324
$T7 = 356
$T8 = 392
__$ArrayPad$ = 440
?TestPrint@?A0xf50bbb2b@@YAXXZ PROC			; `anonymous namespace'::TestPrint, COMDAT

; 36   : 	{

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 b8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 37   : 		std::tuple<int, short, double, char> tp =

  0003b	c6 85 04 01 00
	00 61		 mov	 BYTE PTR $T4[rbp], 97	; 00000061H
  00042	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4008000000000000
  0004a	f2 0f 11 85 28
	01 00 00	 movsd	 QWORD PTR $T5[rbp], xmm0
  00052	c7 85 44 01 00
	00 02 00 00 00	 mov	 DWORD PTR $T6[rbp], 2
  0005c	c7 85 64 01 00
	00 01 00 00 00	 mov	 DWORD PTR $T7[rbp], 1
  00066	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  0006d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00072	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR $T5[rbp]
  00079	4c 8d 85 44 01
	00 00		 lea	 r8, QWORD PTR $T6[rbp]
  00080	48 8d 95 64 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  00087	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0008e	e8 00 00 00 00	 call	 ??$make_tuple@HHND@std@@YA?AV?$tuple@HHND@0@$$QEAH0$$QEAN$$QEAD@Z ; std::make_tuple<int,int,double,char>
  00093	48 8b d0	 mov	 rdx, rax
  00096	48 8d 4d 08	 lea	 rcx, QWORD PTR tp$[rbp]
  0009a	e8 00 00 00 00	 call	 ??$?0HHND$0A@@?$tuple@HFND@std@@QEAA@$$QEAV?$tuple@HHND@1@@Z ; std::tuple<int,short,double,char>::tuple<int,short,double,char><int,int,double,char,0>

; 38   : 			std::make_tuple(1,2,3.0,'a');
; 39   : 		PrintTuple(tp);

  0009f	48 8d 4d 08	 lea	 rcx, QWORD PTR tp$[rbp]
  000a3	e8 00 00 00 00	 call	 ??$PrintTuple@HFND@?A0xf50bbb2b@@YAXAEBV?$tuple@HFND@std@@@Z ; `anonymous namespace'::PrintTuple<int,short,double,char>

; 40   : 		//std::cout << std::get<0>(tp) << std::endl;
; 41   : 	}

  000a8	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TestPrint@?A0xf50bbb2b@@YAXXZ$rtcFrameData
  000b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b8	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000bf	48 33 cd	 xor	 rcx, rbp
  000c2	e8 00 00 00 00	 call	 __security_check_cookie
  000c7	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  000ce	5f		 pop	 rdi
  000cf	5d		 pop	 rbp
  000d0	c3		 ret	 0
?TestPrint@?A0xf50bbb2b@@YAXXZ ENDP			; `anonymous namespace'::TestPrint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
_TEXT	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv65 = 516
tv305 = 520
tv303 = 520
tv300 = 520
tv295 = 520
tv281 = 520
tv266 = 520
tv130 = 520
tv245 = 528
tv204 = 528
tv179 = 528
tv306 = 536
tv304 = 536
tv301 = 536
tv243 = 537
tv177 = 537
tv307 = 540
tv302 = 540
__$ArrayPad$ = 544
_Ostr$ = 592
_Ch$ = 600
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 783  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

$LN23:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR [rsp+632]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c5	 xor	 rax, rbp
  00038	48 89 85 20 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 784  :     using _Elem = char;
; 785  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 786  : 
; 787  :     ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 788  :     const typename _Myos::sentry _Ok(_Ostr);

  00052	48 8b 95 50 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00059	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0005d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00062	90		 npad	 1

; 789  : 
; 790  :     if (_Ok) { // state okay, insert

  00063	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00067	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 1d 03 00
	00		 je	 $LN8@operator

; 791  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00077	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00085	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 8b c8	 mov	 rcx, rax
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0009b	48 83 f8 01	 cmp	 rax, 1
  0009f	7f 0d		 jg	 SHORT $LN15@operator
  000a1	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv130[rbp], 0
  000ac	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000ae	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000bc	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c3	48 03 c8	 add	 rcx, rax
  000c6	48 8b c1	 mov	 rax, rcx
  000c9	48 8b c8	 mov	 rcx, rax
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d2	48 ff c8	 dec	 rax
  000d5	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv130[rbp], rax
$LN16@operator:
  000dc	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv130[rbp]
  000e3	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax

; 792  : 
; 793  :         _TRY_IO_BEGIN
; 794  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000e7	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000f5	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000fc	48 03 c8	 add	 rcx, rax
  000ff	48 8b c1	 mov	 rax, rcx
  00102	48 8b c8	 mov	 rcx, rax
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0010b	89 85 04 02 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  00111	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv65[rbp]
  00117	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011c	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011f	0f 84 eb 00 00
	00		 je	 $LN10@operator

; 795  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  00125	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00127	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  0012b	48 ff c8	 dec	 rax
  0012e	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN4@operator:
  00132	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00136	0f 85 d4 00 00
	00		 jne	 $LN10@operator
  0013c	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00141	0f 8e c9 00 00
	00		 jle	 $LN10@operator

; 796  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00147	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0014e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00151	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00155	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0015c	48 03 c8	 add	 rcx, rax
  0015f	48 8b c1	 mov	 rax, rcx
  00162	48 8b c8	 mov	 rcx, rax
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0016b	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv300[rbp], rax
  00172	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv300[rbp]
  00179	48 89 85 10 02
	00 00		 mov	 QWORD PTR tv179[rbp], rax
  00180	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00187	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0018e	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00195	48 03 c8	 add	 rcx, rax
  00198	48 8b c1	 mov	 rax, rcx
  0019b	48 8b c8	 mov	 rcx, rax
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a4	88 85 18 02 00
	00		 mov	 BYTE PTR tv301[rbp], al
  001aa	0f b6 85 18 02
	00 00		 movzx	 eax, BYTE PTR tv301[rbp]
  001b1	88 85 19 02 00
	00		 mov	 BYTE PTR tv177[rbp], al
  001b7	0f b6 95 19 02
	00 00		 movzx	 edx, BYTE PTR tv177[rbp]
  001be	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR tv179[rbp]
  001c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001cb	89 85 1c 02 00
	00		 mov	 DWORD PTR tv302[rbp], eax
  001d1	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR tv302[rbp]
  001d7	89 85 34 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  001dd	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001e2	89 85 54 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  001e8	48 8d 95 34 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  001ef	48 8d 8d 54 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001f6	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001fb	0f b6 c0	 movzx	 eax, al
  001fe	85 c0		 test	 eax, eax
  00200	74 09		 je	 SHORT $LN11@operator

; 797  :                     _State |= ios_base::badbit;

  00202	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00205	83 c8 04	 or	 eax, 4
  00208	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN11@operator:

; 798  :                 }
; 799  :             }

  0020b	e9 17 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 800  :         }
; 801  : 
; 802  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  00210	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00214	0f 85 8d 00 00
	00		 jne	 $LN12@operator
  0021a	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00221	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00224	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00228	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0022f	48 03 c8	 add	 rcx, rax
  00232	48 8b c1	 mov	 rax, rcx
  00235	48 8b c8	 mov	 rcx, rax
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0023e	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv303[rbp], rax
  00245	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv303[rbp]
  0024c	48 89 85 10 02
	00 00		 mov	 QWORD PTR tv204[rbp], rax
  00253	0f b6 95 58 02
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  0025a	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR tv204[rbp]
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00267	89 85 18 02 00
	00		 mov	 DWORD PTR tv304[rbp], eax
  0026d	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR tv304[rbp]
  00273	89 85 74 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00279	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0027e	89 85 94 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00284	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  0028b	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00292	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00297	0f b6 c0	 movzx	 eax, al
  0029a	85 c0		 test	 eax, eax
  0029c	74 09		 je	 SHORT $LN12@operator

; 803  :             _State |= ios_base::badbit;

  0029e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002a1	83 c8 04	 or	 eax, 4
  002a4	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN12@operator:

; 804  :         }
; 805  : 
; 806  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  002a7	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a9	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  002ad	48 ff c8	 dec	 rax
  002b0	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN7@operator:
  002b4	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  002b8	0f 85 d4 00 00
	00		 jne	 $LN6@operator
  002be	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  002c3	0f 8e c9 00 00
	00		 jle	 $LN6@operator

; 807  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c9	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002d0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d7	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002de	48 03 c8	 add	 rcx, rax
  002e1	48 8b c1	 mov	 rax, rcx
  002e4	48 8b c8	 mov	 rcx, rax
  002e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ed	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv305[rbp], rax
  002f4	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv305[rbp]
  002fb	48 89 85 10 02
	00 00		 mov	 QWORD PTR tv245[rbp], rax
  00302	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00309	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00310	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00317	48 03 c8	 add	 rcx, rax
  0031a	48 8b c1	 mov	 rax, rcx
  0031d	48 8b c8	 mov	 rcx, rax
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00326	88 85 18 02 00
	00		 mov	 BYTE PTR tv306[rbp], al
  0032c	0f b6 85 18 02
	00 00		 movzx	 eax, BYTE PTR tv306[rbp]
  00333	88 85 19 02 00
	00		 mov	 BYTE PTR tv243[rbp], al
  00339	0f b6 95 19 02
	00 00		 movzx	 edx, BYTE PTR tv243[rbp]
  00340	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR tv245[rbp]
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0034d	89 85 1c 02 00
	00		 mov	 DWORD PTR tv307[rbp], eax
  00353	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR tv307[rbp]
  00359	89 85 b4 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  0035f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00364	89 85 d4 01 00
	00		 mov	 DWORD PTR $T10[rbp], eax
  0036a	48 8d 95 b4 01
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  00371	48 8d 8d d4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00378	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0037d	0f b6 c0	 movzx	 eax, al
  00380	85 c0		 test	 eax, eax
  00382	74 09		 je	 SHORT $LN13@operator

; 808  :                 _State |= ios_base::badbit;

  00384	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00387	83 c8 04	 or	 eax, 4
  0038a	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 809  :             }
; 810  :         }

  0038d	e9 17 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  00392	eb 00		 jmp	 SHORT $LN8@operator
$LN21@operator:
$LN8@operator:

; 811  :         _CATCH_IO_(ios_base, _Ostr)
; 812  :     }
; 813  : 
; 814  :     _Ostr.width(0);

  00394	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0039b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003a2	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003a9	48 03 c8	 add	 rcx, rax
  003ac	48 8b c1	 mov	 rax, rcx
  003af	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv281[rbp], rax
  003b6	33 d2		 xor	 edx, edx
  003b8	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv281[rbp]
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z

; 815  :     _Ostr.setstate(_State);

  003c5	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003cf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003d3	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003da	48 03 c8	 add	 rcx, rax
  003dd	48 8b c1	 mov	 rax, rcx
  003e0	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  003e7	45 33 c0	 xor	 r8d, r8d
  003ea	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003ed	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv295[rbp]
  003f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 816  :     return _Ostr;

  003fa	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00401	48 89 85 f8 01
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  00408	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0040c	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00411	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR $T11[rbp]

; 817  : }

  00418	48 8b f8	 mov	 rdi, rax
  0041b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0041f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData
  00426	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0042b	48 8b c7	 mov	 rax, rdi
  0042e	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00435	48 33 cd	 xor	 rcx, rbp
  00438	e8 00 00 00 00	 call	 __security_check_cookie
  0043d	48 8d a5 38 02
	00 00		 lea	 rsp, QWORD PTR [rbp+568]
  00444	5f		 pop	 rdi
  00445	5d		 pop	 rbp
  00446	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv65 = 516
tv305 = 520
tv303 = 520
tv300 = 520
tv295 = 520
tv281 = 520
tv266 = 520
tv130 = 520
tv245 = 528
tv204 = 528
tv179 = 528
tv306 = 536
tv304 = 536
tv301 = 536
tv243 = 537
tv177 = 537
tv307 = 540
tv302 = 540
__$ArrayPad$ = 544
_Ostr$ = 592
_Ch$ = 600
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv65 = 516
tv305 = 520
tv303 = 520
tv300 = 520
tv295 = 520
tv281 = 520
tv266 = 520
tv130 = 520
tv245 = 528
tv204 = 528
tv179 = 528
tv306 = 536
tv304 = 536
tv301 = 536
tv243 = 537
tv177 = 537
tv307 = 540
tv302 = 540
__$ArrayPad$ = 544
_Ostr$ = 592
_Ch$ = 600
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 811  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv266[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv266[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv65 = 516
tv305 = 520
tv303 = 520
tv300 = 520
tv295 = 520
tv281 = 520
tv266 = 520
tv130 = 520
tv245 = 528
tv204 = 528
tv179 = 528
tv306 = 536
tv304 = 536
tv301 = 536
tv243 = 537
tv177 = 537
tv307 = 540
tv302 = 540
__$ArrayPad$ = 544
_Ostr$ = 592
_Ch$ = 600
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv65 = 516
tv305 = 520
tv303 = 520
tv300 = 520
tv295 = 520
tv281 = 520
tv266 = 520
tv130 = 520
tv245 = 528
tv204 = 528
tv179 = 528
tv306 = 536
tv304 = 536
tv301 = 536
tv243 = 537
tv177 = 537
tv307 = 540
tv302 = 540
__$ArrayPad$ = 544
_Ostr$ = 592
_Ch$ = 600
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 811  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv266[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv266[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 738  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00047	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 739  :     using _Elem = char;
; 740  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 741  : 
; 742  :     ios_base::iostate _State = ios_base::goodbit;

  0004c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 743  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00053	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005a	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005f	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 744  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00063	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00071	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 8b c8	 mov	 rcx, rax
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00087	48 85 c0	 test	 rax, rax
  0008a	7e 5b		 jle	 SHORT $LN17@operator
  0008c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a1	48 03 c8	 add	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b0	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b4	7e 31		 jle	 SHORT $LN17@operator
  000b6	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c4	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cb	48 03 c8	 add	 rcx, rax
  000ce	48 8b c1	 mov	 rax, rcx
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000da	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000de	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e5	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e7	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f2	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000f9	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 745  :     const typename _Myos::sentry _Ok(_Ostr);

  000fd	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00104	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00108	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010d	90		 npad	 1

; 746  : 
; 747  :     if (!_Ok) {

  0010e	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00112	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00117	0f b6 c0	 movzx	 eax, al
  0011a	85 c0		 test	 eax, eax
  0011c	75 0e		 jne	 SHORT $LN8@operator

; 748  :         _State |= ios_base::badbit;

  0011e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00121	83 c8 04	 or	 eax, 4
  00124	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 749  :     } else { // state okay, insert

  00127	e9 b6 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 750  :         _TRY_IO_BEGIN
; 751  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00133	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00136	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00141	48 03 c8	 add	 rcx, rax
  00144	48 8b c1	 mov	 rax, rcx
  00147	48 8b c8	 mov	 rcx, rax
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00150	89 85 e4 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00156	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0015c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00161	83 f8 40	 cmp	 eax, 64			; 00000040H
  00164	0f 84 e3 00 00
	00		 je	 $LN11@operator

; 752  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0016a	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0016c	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00170	48 ff c8	 dec	 rax
  00173	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00177	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0017c	0f 8e cb 00 00
	00		 jle	 $LN11@operator

; 753  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00182	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00189	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00190	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 8b c8	 mov	 rcx, rax
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a6	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv311[rbp], rax
  001ad	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv311[rbp]
  001b4	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv194[rbp], rax
  001bb	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001c9	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001d0	48 03 c8	 add	 rcx, rax
  001d3	48 8b c1	 mov	 rax, rcx
  001d6	48 8b c8	 mov	 rcx, rax
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001df	88 85 f8 01 00
	00		 mov	 BYTE PTR tv312[rbp], al
  001e5	0f b6 85 f8 01
	00 00		 movzx	 eax, BYTE PTR tv312[rbp]
  001ec	88 85 f9 01 00
	00		 mov	 BYTE PTR tv192[rbp], al
  001f2	0f b6 95 f9 01
	00 00		 movzx	 edx, BYTE PTR tv192[rbp]
  001f9	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv194[rbp]
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00206	89 85 fc 01 00
	00		 mov	 DWORD PTR tv313[rbp], eax
  0020c	8b 85 fc 01 00
	00		 mov	 eax, DWORD PTR tv313[rbp]
  00212	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  00218	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0021d	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  00223	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0022a	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00231	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00236	0f b6 c0	 movzx	 eax, al
  00239	85 c0		 test	 eax, eax
  0023b	74 0b		 je	 SHORT $LN12@operator

; 754  :                     _State |= ios_base::badbit; // insertion failed, quit

  0023d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00240	83 c8 04	 or	 eax, 4
  00243	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 755  :                     break;

  00246	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 756  :                 }
; 757  :             }

  00248	e9 1f ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0024d	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00251	75 6e		 jne	 SHORT $LN13@operator
  00253	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0025a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0025d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00261	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00268	48 03 c8	 add	 rcx, rax
  0026b	48 8b c1	 mov	 rax, rcx
  0026e	48 8b c8	 mov	 rcx, rax
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00277	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv314[rbp], rax
  0027e	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv314[rbp]
  00285	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv219[rbp], rax
  0028c	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00290	48 8b 95 38 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00297	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv219[rbp]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  002a4	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv315[rbp], rax
  002ab	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  002af	48 39 85 f8 01
	00 00		 cmp	 QWORD PTR tv315[rbp], rax
  002b6	74 09		 je	 SHORT $LN13@operator

; 761  :             _State |= ios_base::badbit;

  002b8	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002bb	83 c8 04	 or	 eax, 4
  002be	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 762  :         }
; 763  : 
; 764  :         if (_State == ios_base::goodbit) {

  002c1	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  002c5	0f 85 e3 00 00
	00		 jne	 $LN14@operator

; 765  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002cb	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002cd	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002d1	48 ff c8	 dec	 rax
  002d4	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002d8	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002dd	0f 8e cb 00 00
	00		 jle	 $LN14@operator

; 766  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002e3	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ed	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f1	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002f8	48 03 c8	 add	 rcx, rax
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	48 8b c8	 mov	 rcx, rax
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00307	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv316[rbp], rax
  0030e	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv316[rbp]
  00315	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv256[rbp], rax
  0031c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00323	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00326	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0032a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00331	48 03 c8	 add	 rcx, rax
  00334	48 8b c1	 mov	 rax, rcx
  00337	48 8b c8	 mov	 rcx, rax
  0033a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00340	88 85 f8 01 00
	00		 mov	 BYTE PTR tv317[rbp], al
  00346	0f b6 85 f8 01
	00 00		 movzx	 eax, BYTE PTR tv317[rbp]
  0034d	88 85 f9 01 00
	00		 mov	 BYTE PTR tv254[rbp], al
  00353	0f b6 95 f9 01
	00 00		 movzx	 edx, BYTE PTR tv254[rbp]
  0035a	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv256[rbp]
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00367	89 85 fc 01 00
	00		 mov	 DWORD PTR tv318[rbp], eax
  0036d	8b 85 fc 01 00
	00		 mov	 eax, DWORD PTR tv318[rbp]
  00373	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00379	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0037e	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00384	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  0038b	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00392	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00397	0f b6 c0	 movzx	 eax, al
  0039a	85 c0		 test	 eax, eax
  0039c	74 0b		 je	 SHORT $LN15@operator

; 767  :                     _State |= ios_base::badbit; // insertion failed, quit

  0039e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  003a1	83 c8 04	 or	 eax, 4
  003a4	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 768  :                     break;

  003a7	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 769  :                 }
; 770  :             }

  003a9	e9 1f ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 771  :         }
; 772  : 
; 773  :         _Ostr.width(0);

  003ae	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003bc	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003c3	48 03 c8	 add	 rcx, rax
  003c6	48 8b c1	 mov	 rax, rcx
  003c9	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv277[rbp], rax
  003d0	33 d2		 xor	 edx, edx
  003d2	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv277[rbp]
  003d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  003df	90		 npad	 1
  003e0	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 774  :         _CATCH_IO_(ios_base, _Ostr)
; 775  :     }
; 776  : 
; 777  :     _Ostr.setstate(_State);

  003e2	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ec	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003f0	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003f7	48 03 c8	 add	 rcx, rax
  003fa	48 8b c1	 mov	 rax, rcx
  003fd	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv306[rbp], rax
  00404	45 33 c0	 xor	 r8d, r8d
  00407	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  0040a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv306[rbp]
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 778  :     return _Ostr;

  00417	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0041e	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00425	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00429	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0042e	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 779  : }

  00435	48 8b f8	 mov	 rdi, rax
  00438	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  00443	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00448	48 8b c7	 mov	 rax, rdi
  0044b	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00452	48 33 cd	 xor	 rcx, rbp
  00455	e8 00 00 00 00	 call	 __security_check_cookie
  0045a	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  00461	5f		 pop	 rdi
  00462	5d		 pop	 rbp
  00463	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 774  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv291[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 774  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv291[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\vcruntime_typeinfo.h
;	COMDAT ?name@type_info@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?name@type_info@@QEBAPEBDXZ PROC			; type_info::name, COMDAT

; 93   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B69C91F9_vcruntime_typeinfo@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 94   :         #ifdef _M_CEE_PURE
; 95   :         return __std_type_info_name(&_Data, static_cast<__type_info_node*>(__type_info_root_node.ToPointer()));
; 96   :         #else
; 97   :         return __std_type_info_name(&_Data, &__type_info_root_node);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 83 c0 08	 add	 rax, 8
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 __std_type_info_name
  00051	90		 npad	 1

; 98   :         #endif
; 99   :     }

  00052	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?name@type_info@@QEBAPEBDXZ ENDP			; type_info::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 410  :     _NODISCARD static constexpr int_type eof() noexcept { // return end-of-file metacharacter

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 411  :         return static_cast<int_type>(EOF);

  0002b	b8 ff ff ff ff	 mov	 eax, -1

; 412  :     }

  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 401  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1

; 402  :         // test for metacharacter equality
; 403  :         return _Left == _Right;

  0003c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00043	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0004a	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0004c	39 08		 cmp	 DWORD PTR [rax], ecx
  0004e	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00050	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  0005a	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005c	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00066	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 404  :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
tv68 = 192
tv69 = 200
_First$ = 240
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 310  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept { // strengthened

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 311  :         // find length of null-terminated string
; 312  : #if _HAS_CXX17
; 313  : #if _HAS_CHAR8_T
; 314  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 315  : #if _HAS_U8_INTRINSICS
; 316  :             return __builtin_u8strlen(_First);
; 317  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 318  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 319  : #endif // _HAS_U8_INTRINSICS
; 320  :         } else
; 321  : #endif // _HAS_CHAR8_T
; 322  :         {
; 323  :             return __builtin_strlen(_First);

  00037	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  0003e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  00045	48 c7 85 c8 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR tv69[rbp], -1
$LL3@length:
  00050	48 ff 85 c8 00
	00 00		 inc	 QWORD PTR tv69[rbp]
  00057	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  0005e	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  00065	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00069	75 e5		 jne	 SHORT $LL3@length
  0006b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 324  :         }
; 325  : #else // _HAS_CXX17
; 326  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 327  : #endif // _HAS_CXX17
; 328  :     }

  00072	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?foo@TupleOp@@AEAAXXZ
_TEXT	SEGMENT
this$ = 224
?foo@TupleOp@@AEAAXXZ PROC				; TupleOp::foo, COMDAT

; 141  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 142  : 	//TestPrint();
; 143  : 	//MainPrint();
; 144  : 	//FindMain();
; 145  : }

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?foo@TupleOp@@AEAAXXZ ENDP				; TupleOp::foo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?run@TupleOp@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?run@TupleOp@@QEAAXXZ PROC				; TupleOp::run, COMDAT

; 7    : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 8    : 	this->foo();

  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?foo@TupleOp@@AEAAXXZ	; TupleOp::foo

; 9    : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?run@TupleOp@@QEAAXXZ ENDP				; TupleOp::run
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00040	90		 npad	 1
  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\TupleOp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__203B6EE8_TupleOp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1
  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
