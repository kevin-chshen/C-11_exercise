; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28105.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7F8AB566_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2FC657CE_cstdlib DB 01H
__70639AFA_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__8A0D8D63_cstddef DB 01H
__C8593937_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__96AB3BB0_vcruntime_exception@h DB 01H
__A47A247F_exception DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__289D9ECD_limits DB 01H
__F3238959_xutility DB 01H
__725EB186_xmemory DB 01H
__D64083BB_tuple DB 01H
__2DF72A1A_xpolymorphic_allocator@h DB 01H
__068D371A_xstring DB 01H
__2D341E22_stdexcept DB 01H
__502C2D49_xcall_once@h DB 01H
__EF713F69_system_error DB 01H
__B69C91F9_vcruntime_typeinfo@h DB 01H
__83FC7A40_typeinfo DB 01H
__94339243_memory DB 01H
__B876C54C_xfacet DB 01H
__7242C389_ctype@h DB 01H
__9C759988_xlocinfo DB 01H
__D9B3432B_xlocale DB 01H
__A590EE9B_xiosbase DB 01H
__4734253C_xlocnum DB 01H
__1421D064_ios DB 01H
__3F0899E5_AlignofCpp@cpp DB 01H
__A973ACD5_istream DB 01H
__CAA399EF_ostream DB 01H
__2F94A69E_streambuf DB 01H
__E4744B4B_iosfwd DB 01H
__18CBD245_utility DB 01H
__EFD44557_xstddef DB 01H
__AE76A8A9_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?run@AlignofCpp@@QEAAXXZ			; AlignofCpp::run
PUBLIC	?foo@AlignofCpp@@QEAAXXZ			; AlignofCpp::foo
PUBLIC	?storage@AlignofCpp@@QEAAXXZ			; AlignofCpp::storage
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0L@PMOGBECG@distructor@			; `string'
PUBLIC	??_C@_0O@FJCOFKIP@alignsize?5?3?$DN?5@		; `string'
PUBLIC	??_C@_06PCMKKBDA@sz?5?3?$DN?5@			; `string'
PUBLIC	??_C@_0L@GHPPAHCE@sizeof?5?3?$DN?5@		; `string'
PUBLIC	??_C@_06EMGDOFLA@?0?5val?5@			; `string'
PUBLIC	??_C@_04JJMPDPBF@pad?5@				; `string'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?run@AlignofCpp@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?run@AlignofCpp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?foo@AlignofCpp@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+287
	DD	imagerel $unwind$?foo@AlignofCpp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?storage@AlignofCpp@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+367
	DD	imagerel $unwind$?storage@AlignofCpp@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0A@?A0x94d138ea@@QEAA@HH@Z DD imagerel ??0A@?A0x94d138ea@@QEAA@HH@Z
	DD	imagerel ??0A@?A0x94d138ea@@QEAA@HH@Z+110
	DD	imagerel $unwind$??0A@?A0x94d138ea@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1A@?A0x94d138ea@@QEAA@XZ DD imagerel ??1A@?A0x94d138ea@@QEAA@XZ
	DD	imagerel ??1A@?A0x94d138ea@@QEAA@XZ+126
	DD	imagerel $unwind$??1A@?A0x94d138ea@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GA@?A0x94d138ea@@QEAAPEAXI@Z DD imagerel ??_GA@?A0x94d138ea@@QEAAPEAXI@Z
	DD	imagerel ??_GA@?A0x94d138ea@@QEAAPEAXI@Z+105
	DD	imagerel $unwind$??_GA@?A0x94d138ea@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1124
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+91
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04JJMPDPBF@pad?5@
CONST	SEGMENT
??_C@_04JJMPDPBF@pad?5@ DB 'pad ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMGDOFLA@?0?5val?5@
CONST	SEGMENT
??_C@_06EMGDOFLA@?0?5val?5@ DB ', val ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHPPAHCE@sizeof?5?3?$DN?5@
CONST	SEGMENT
??_C@_0L@GHPPAHCE@sizeof?5?3?$DN?5@ DB 'sizeof := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCMKKBDA@sz?5?3?$DN?5@
CONST	SEGMENT
??_C@_06PCMKKBDA@sz?5?3?$DN?5@ DB 'sz := ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJCOFKIP@alignsize?5?3?$DN?5@
CONST	SEGMENT
??_C@_0O@FJCOFKIP@alignsize?5?3?$DN?5@ DB 'alignsize := ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PMOGBECG@distructor@
CONST	SEGMENT
??_C@_0L@PMOGBECG@distructor@ DB 'distructor', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	09eH
	DB	02H
	DB	0f1H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025052a19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'9', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	0d1H, 0aH
	DB	02H
	DB	08aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054019H
	DD	01132318H
	DD	0700c0047H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0223H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GA@?A0x94d138ea@@QEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1A@?A0x94d138ea@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1A@?A0x94d138ea@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1A@?A0x94d138ea@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1A@?A0x94d138ea@@QEAA@XZ DD 025052a19H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1A@?A0x94d138ea@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0A@?A0x94d138ea@@QEAA@HH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DB 060H
	DD	imagerel $ip2state$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025051e19H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DB 060H
	DD	imagerel $ip2state$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 025052f19H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DB 060H
	DD	imagerel $ip2state$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025052a19H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??2@YAPEAX_KPEAX@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??2@YAPEAX_KPEAX@Z DB 060H
	DD	imagerel $ip2state$??2@YAPEAX_KPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025052f19H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??2@YAPEAX_KPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?storage@AlignofCpp@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?storage@AlignofCpp@@QEAAXXZ$rtcName$0 DB 061H		; AlignofCpp::storage
	DB	00H
	ORG $+2
?storage@AlignofCpp@@QEAAXXZ$rtcName$1 DB 062H		; AlignofCpp::storage
	DB	00H
	ORG $+10
?storage@AlignofCpp@@QEAAXXZ$rtcVarDesc DD 044H		; AlignofCpp::storage
	DD	04H
	DQ	FLAT:?storage@AlignofCpp@@QEAAXXZ$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?storage@AlignofCpp@@QEAAXXZ$rtcName$0
	ORG $+96
?storage@AlignofCpp@@QEAAXXZ$rtcFrameData DD 02H	; AlignofCpp::storage
	DD	00H
	DQ	FLAT:?storage@AlignofCpp@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?foo@AlignofCpp@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?run@AlignofCpp@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD 025053419H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD 025052f19H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025052f19H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__empty_global_delete@@YAXPEAX@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?__empty_global_delete@@YAXPEAX@Z DB 060H
	DD	imagerel $ip2state$?__empty_global_delete@@YAXPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025052a19H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?__empty_global_delete@@YAXPEAX@Z
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 130  :         explicit __CLR_OR_THIS_CALL operator bool() const { // test if stream state okay

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :             return _Ok;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 132  :         }

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 115  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 116  : #if _HAS_EXCEPTIONS
; 117  :             if (!_STD uncaught_exception()) { // TRANSITION, OS#15518458

  00037	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0003c	90		 npad	 1
  0003d	0f b6 c0	 movzx	 eax, al
  00040	85 c0		 test	 eax, eax
  00042	75 11		 jne	 SHORT $LN2@sentry

; 118  :                 this->_Myostr._Osfx();

  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00054	90		 npad	 1
$LN2@sentry:

; 119  :             }
; 120  : #else // _HAS_EXCEPTIONS
; 121  :             this->_Myostr._Osfx();
; 122  : #endif // _HAS_EXCEPTIONS
; 123  :         }

  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00061	90		 npad	 1
  00062	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr)

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :             : _Sentry_base(_Ostr) { // construct locking and testing stream

  0003b	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	90		 npad	 1

; 92   :             if (!_Ostr.good()) {

  0004f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00073	0f b6 c0	 movzx	 eax, al
  00076	85 c0		 test	 eax, eax
  00078	75 10		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 94   :                 return;

  00085	e9 81 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  0008a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00091	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00094	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00098	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0009f	48 03 c8	 add	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ae	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000b2	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000b7	74 0d		 je	 SHORT $LN4@sentry
  000b9	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c0	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000c4	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000c6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cd	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 100  :                 return;

  000d1	eb 38		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  : 
; 104  :             _Tied->flush();

  000d3	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000dd	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000e4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000eb	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00101	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00108	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  0010b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00112	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00119	5f		 pop	 rdi
  0011a	5d		 pop	 rbp
  0011b	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 76   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00037	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00048	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00056	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
  00063	48 8b c8	 mov	 rcx, rax
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006c	90		 npad	 1
  0006d	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 78   :             if (_Rdbuf) {

  00071	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00076	74 0f		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Unlock();

  00078	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00083	ff 50 10	 call	 QWORD PTR [rax+16]
  00086	90		 npad	 1
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx

; 70   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  0005d	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0006b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00072	48 03 c8	 add	 rcx, rax
  00075	48 8b c1	 mov	 rax, rcx
  00078	48 8b c8	 mov	 rcx, rax
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00081	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 71   :             if (_Rdbuf) {

  00085	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0008a	74 0e		 je	 SHORT $LN2@Sentry_bas

; 72   :                 _Rdbuf->_Lock();

  0008c	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00090	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00093	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00097	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 73   :             }
; 74   :         }

  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
tv80 = 192
_Ostr$ = 240
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 950  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 951  :     _Ostr.put(_Ostr.widen('\n'));

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00044	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004b	48 03 c8	 add	 rcx, rax
  0004e	48 8b c1	 mov	 rax, rcx
  00051	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00058	b2 0a		 mov	 dl, 10
  0005a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00067	0f b6 d0	 movzx	 edx, al
  0006a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 952  :     _Ostr.flush();

  00077	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 953  :     return _Ostr;

  00084	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 954  : }

  0008b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 738  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CAA399EF_ostream
  00047	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 739  :     using _Elem = char;
; 740  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 741  : 
; 742  :     ios_base::iostate _State = ios_base::goodbit;

  0004c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 743  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00053	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005a	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005f	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 744  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00063	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00071	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 8b c8	 mov	 rcx, rax
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00087	48 85 c0	 test	 rax, rax
  0008a	7e 5b		 jle	 SHORT $LN17@operator
  0008c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a1	48 03 c8	 add	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b0	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b4	7e 31		 jle	 SHORT $LN17@operator
  000b6	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c4	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cb	48 03 c8	 add	 rcx, rax
  000ce	48 8b c1	 mov	 rax, rcx
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000da	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000de	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e5	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e7	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f2	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000f9	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 745  :     const typename _Myos::sentry _Ok(_Ostr);

  000fd	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00104	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00108	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010d	90		 npad	 1

; 746  : 
; 747  :     if (!_Ok) {

  0010e	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00112	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00117	0f b6 c0	 movzx	 eax, al
  0011a	85 c0		 test	 eax, eax
  0011c	75 0e		 jne	 SHORT $LN8@operator

; 748  :         _State |= ios_base::badbit;

  0011e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00121	83 c8 04	 or	 eax, 4
  00124	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 749  :     } else { // state okay, insert

  00127	e9 b6 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 750  :         _TRY_IO_BEGIN
; 751  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00133	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00136	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00141	48 03 c8	 add	 rcx, rax
  00144	48 8b c1	 mov	 rax, rcx
  00147	48 8b c8	 mov	 rcx, rax
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00150	89 85 e4 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00156	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0015c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00161	83 f8 40	 cmp	 eax, 64			; 00000040H
  00164	0f 84 e3 00 00
	00		 je	 $LN11@operator

; 752  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0016a	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0016c	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00170	48 ff c8	 dec	 rax
  00173	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00177	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0017c	0f 8e cb 00 00
	00		 jle	 $LN11@operator

; 753  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00182	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00189	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00190	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 8b c8	 mov	 rcx, rax
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a6	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv311[rbp], rax
  001ad	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv311[rbp]
  001b4	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv194[rbp], rax
  001bb	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001c9	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001d0	48 03 c8	 add	 rcx, rax
  001d3	48 8b c1	 mov	 rax, rcx
  001d6	48 8b c8	 mov	 rcx, rax
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001df	88 85 f8 01 00
	00		 mov	 BYTE PTR tv312[rbp], al
  001e5	0f b6 85 f8 01
	00 00		 movzx	 eax, BYTE PTR tv312[rbp]
  001ec	88 85 f9 01 00
	00		 mov	 BYTE PTR tv192[rbp], al
  001f2	0f b6 95 f9 01
	00 00		 movzx	 edx, BYTE PTR tv192[rbp]
  001f9	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv194[rbp]
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00206	89 85 fc 01 00
	00		 mov	 DWORD PTR tv313[rbp], eax
  0020c	8b 85 fc 01 00
	00		 mov	 eax, DWORD PTR tv313[rbp]
  00212	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  00218	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0021d	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  00223	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0022a	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00231	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00236	0f b6 c0	 movzx	 eax, al
  00239	85 c0		 test	 eax, eax
  0023b	74 0b		 je	 SHORT $LN12@operator

; 754  :                     _State |= ios_base::badbit; // insertion failed, quit

  0023d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00240	83 c8 04	 or	 eax, 4
  00243	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 755  :                     break;

  00246	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 756  :                 }
; 757  :             }

  00248	e9 1f ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0024d	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00251	75 6e		 jne	 SHORT $LN13@operator
  00253	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0025a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0025d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00261	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00268	48 03 c8	 add	 rcx, rax
  0026b	48 8b c1	 mov	 rax, rcx
  0026e	48 8b c8	 mov	 rcx, rax
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00277	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv314[rbp], rax
  0027e	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv314[rbp]
  00285	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv219[rbp], rax
  0028c	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00290	48 8b 95 38 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00297	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv219[rbp]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  002a4	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv315[rbp], rax
  002ab	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  002af	48 39 85 f8 01
	00 00		 cmp	 QWORD PTR tv315[rbp], rax
  002b6	74 09		 je	 SHORT $LN13@operator

; 761  :             _State |= ios_base::badbit;

  002b8	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002bb	83 c8 04	 or	 eax, 4
  002be	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 762  :         }
; 763  : 
; 764  :         if (_State == ios_base::goodbit) {

  002c1	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  002c5	0f 85 e3 00 00
	00		 jne	 $LN14@operator

; 765  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002cb	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002cd	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002d1	48 ff c8	 dec	 rax
  002d4	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002d8	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002dd	0f 8e cb 00 00
	00		 jle	 $LN14@operator

; 766  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002e3	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ed	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f1	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002f8	48 03 c8	 add	 rcx, rax
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	48 8b c8	 mov	 rcx, rax
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00307	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv316[rbp], rax
  0030e	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv316[rbp]
  00315	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv256[rbp], rax
  0031c	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00323	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00326	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0032a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00331	48 03 c8	 add	 rcx, rax
  00334	48 8b c1	 mov	 rax, rcx
  00337	48 8b c8	 mov	 rcx, rax
  0033a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00340	88 85 f8 01 00
	00		 mov	 BYTE PTR tv317[rbp], al
  00346	0f b6 85 f8 01
	00 00		 movzx	 eax, BYTE PTR tv317[rbp]
  0034d	88 85 f9 01 00
	00		 mov	 BYTE PTR tv254[rbp], al
  00353	0f b6 95 f9 01
	00 00		 movzx	 edx, BYTE PTR tv254[rbp]
  0035a	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR tv256[rbp]
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00367	89 85 fc 01 00
	00		 mov	 DWORD PTR tv318[rbp], eax
  0036d	8b 85 fc 01 00
	00		 mov	 eax, DWORD PTR tv318[rbp]
  00373	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00379	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0037e	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00384	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  0038b	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00392	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00397	0f b6 c0	 movzx	 eax, al
  0039a	85 c0		 test	 eax, eax
  0039c	74 0b		 je	 SHORT $LN15@operator

; 767  :                     _State |= ios_base::badbit; // insertion failed, quit

  0039e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  003a1	83 c8 04	 or	 eax, 4
  003a4	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 768  :                     break;

  003a7	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 769  :                 }
; 770  :             }

  003a9	e9 1f ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 771  :         }
; 772  : 
; 773  :         _Ostr.width(0);

  003ae	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003bc	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003c3	48 03 c8	 add	 rcx, rax
  003c6	48 8b c1	 mov	 rax, rcx
  003c9	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv277[rbp], rax
  003d0	33 d2		 xor	 edx, edx
  003d2	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv277[rbp]
  003d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  003df	90		 npad	 1
  003e0	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 774  :         _CATCH_IO_(ios_base, _Ostr)
; 775  :     }
; 776  : 
; 777  :     _Ostr.setstate(_State);

  003e2	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ec	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003f0	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003f7	48 03 c8	 add	 rcx, rax
  003fa	48 8b c1	 mov	 rax, rcx
  003fd	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv306[rbp], rax
  00404	45 33 c0	 xor	 r8d, r8d
  00407	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  0040a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv306[rbp]
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 778  :     return _Ostr;

  00417	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0041e	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00425	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00429	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0042e	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 779  : }

  00435	48 8b f8	 mov	 rdi, rax
  00438	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  00443	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00448	48 8b c7	 mov	 rax, rdi
  0044b	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00452	48 33 cd	 xor	 rcx, rbp
  00455	e8 00 00 00 00	 call	 __security_check_cookie
  0045a	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  00461	5f		 pop	 rdi
  00462	5d		 pop	 rbp
  00463	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 774  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv291[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv139 = 484
tv316 = 488
tv314 = 488
tv311 = 488
tv306 = 488
tv291 = 488
tv277 = 488
tv137 = 488
tv256 = 496
tv219 = 496
tv194 = 496
tv317 = 504
tv315 = 504
tv312 = 504
tv254 = 505
tv192 = 505
tv318 = 508
tv313 = 508
__$ArrayPad$ = 512
_Ostr$ = 560
_Val$ = 568
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 774  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00036	41 b0 01	 mov	 r8b, 1
  00039	ba 04 00 00 00	 mov	 edx, 4
  0003e	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv291[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0004b	90		 npad	 1
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GA@?A0x94d138ea@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GA@?A0x94d138ea@@QEAAPEAXI@Z PROC			; `anonymous namespace'::A::`scalar deleting destructor', COMDAT
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1A@?A0x94d138ea@@QEAA@XZ ; `anonymous namespace'::A::~A
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GA@?A0x94d138ea@@QEAAPEAXI@Z ENDP			; `anonymous namespace'::A::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ??1A@?A0x94d138ea@@QEAA@XZ
_TEXT	SEGMENT
tv71 = 192
this$ = 240
??1A@?A0x94d138ea@@QEAA@XZ PROC				; `anonymous namespace'::A::~A, COMDAT

; 23   : 		~A() {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 24   : 			std::cout << "distructor" << std::endl;

  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PMOGBECG@distructor@
  0003e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00045	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0004a	90		 npad	 1
  0004b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00059	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00066	90		 npad	 1

; 25   : 			avg = 0;

  00067	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 26   : 		}

  00074	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
??1A@?A0x94d138ea@@QEAA@XZ ENDP				; `anonymous namespace'::A::~A
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ??0A@?A0x94d138ea@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 224
a$ = 232
b$ = 240
??0A@?A0x94d138ea@@QEAA@HH@Z PROC			; `anonymous namespace'::A::A, COMDAT

; 21   : 		A(int a, int b) : avg((a + b) / 2) {}

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003f	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR b$[rbp]
  00045	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR a$[rbp]
  0004b	03 c8		 add	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	99		 cdq
  00050	2b c2		 sub	 eax, edx
  00052	d1 f8		 sar	 eax, 1
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	89 01		 mov	 DWORD PTR [rcx], eax
  0005d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
??0A@?A0x94d138ea@@QEAA@HH@Z ENDP			; `anonymous namespace'::A::A
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 410  :     _NODISCARD static constexpr int_type eof() noexcept { // return end-of-file metacharacter

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 411  :         return static_cast<int_type>(EOF);

  0002b	b8 ff ff ff ff	 mov	 eax, -1

; 412  :     }

  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 401  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1

; 402  :         // test for metacharacter equality
; 403  :         return _Left == _Right;

  0003c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00043	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0004a	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0004c	39 08		 cmp	 DWORD PTR [rax], ecx
  0004e	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00050	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  0005a	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005c	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00066	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 404  :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
tv68 = 192
tv69 = 200
_First$ = 240
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 310  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept { // strengthened

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__068D371A_xstring
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1

; 311  :         // find length of null-terminated string
; 312  : #if _HAS_CXX17
; 313  : #if _HAS_CHAR8_T
; 314  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 315  : #if _HAS_U8_INTRINSICS
; 316  :             return __builtin_u8strlen(_First);
; 317  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 318  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 319  : #endif // _HAS_U8_INTRINSICS
; 320  :         } else
; 321  : #endif // _HAS_CHAR8_T
; 322  :         {
; 323  :             return __builtin_strlen(_First);

  00037	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  0003e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  00045	48 c7 85 c8 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR tv69[rbp], -1
$LL3@length:
  00050	48 ff 85 c8 00
	00 00		 inc	 QWORD PTR tv69[rbp]
  00057	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  0005e	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  00065	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00069	75 e5		 jne	 SHORT $LL3@length
  0006b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 324  :         }
; 325  : #else // _HAS_CXX17
; 326  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 327  : #endif // _HAS_CXX17
; 328  :     }

  00072	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F8AB566_vcruntime_new@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1

; 169  :         (void)_Size;
; 170  :         return _Where;

  0003c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 171  :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?storage@AlignofCpp@@QEAAXXZ
_TEXT	SEGMENT
a$ = 4
b$ = 36
$T5 = 264
tv141 = 280
tv129 = 280
tv80 = 280
tv95 = 288
tv134 = 296
__$ArrayPad$ = 304
this$ = 352
?storage@AlignofCpp@@QEAAXXZ PROC			; AlignofCpp::storage, COMDAT

; 39   : void AlignofCpp::storage() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 30 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 40   : 	Aligned_A a, b;
; 41   : 	new (&a) A(10, 20);

  00047	48 8d 55 04	 lea	 rdx, QWORD PTR a$[rbp]
  0004b	b9 04 00 00 00	 mov	 ecx, 4
  00050	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00055	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0005c	41 b8 14 00 00
	00		 mov	 r8d, 20
  00062	ba 0a 00 00 00	 mov	 edx, 10
  00067	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  0006e	e8 00 00 00 00	 call	 ??0A@?A0x94d138ea@@QEAA@HH@Z ; `anonymous namespace'::A::A

; 42   : 	b = a;

  00073	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  00076	89 45 24	 mov	 DWORD PTR b$[rbp], eax

; 43   : 	std::cout << reinterpret_cast<A&>(b).avg << std::endl;

  00079	8b 55 24	 mov	 edx, DWORD PTR b$[rbp]
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00089	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00097	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 44   : 	reinterpret_cast<A&>(a).~A();

  000a4	33 d2		 xor	 edx, edx
  000a6	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  000aa	e8 00 00 00 00	 call	 ??_GA@?A0x94d138ea@@QEAAPEAXI@Z

; 45   : 	std::cout << "pad " << a._Pad << ", val " << a._Val << std::endl;

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JJMPDPBF@pad?5@
  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000c2	48 8d 55 04	 lea	 rdx, QWORD PTR a$[rbp]
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EMGDOFLA@?0?5val?5@
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000dd	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv129[rbp], rax
  000e4	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  000e7	89 85 20 01 00
	00		 mov	 DWORD PTR tv95[rbp], eax
  000ed	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR tv95[rbp]
  000f3	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv129[rbp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00100	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0010e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR tv134[rbp]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 46   : 	std::cout << reinterpret_cast<A&>(a).avg << std::endl;

  0011b	8b 55 04	 mov	 edx, DWORD PTR a$[rbp]
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0012b	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv141[rbp], rax
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00139	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv141[rbp]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 47   : 
; 48   : }

  00146	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?storage@AlignofCpp@@QEAAXXZ$rtcFrameData
  00151	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00156	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0015d	48 33 cd	 xor	 rcx, rbp
  00160	e8 00 00 00 00	 call	 __security_check_cookie
  00165	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0016c	5f		 pop	 rdi
  0016d	5d		 pop	 rbp
  0016e	c3		 ret	 0
?storage@AlignofCpp@@QEAAXXZ ENDP			; AlignofCpp::storage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?foo@AlignofCpp@@QEAAXXZ
_TEXT	SEGMENT
alignsize$ = 4
sz$ = 36
tv95 = 248
tv83 = 248
tv71 = 248
tv132 = 256
tv88 = 256
tv76 = 256
this$ = 304
?foo@AlignofCpp@@QEAAXXZ PROC				; AlignofCpp::foo, COMDAT

; 31   : void AlignofCpp::foo() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 32   : 	int alignsize = std::alignment_of<MyStruct>::value;

  00036	c7 45 04 04 00
	00 00		 mov	 DWORD PTR alignsize$[rbp], 4

; 33   : 	int sz = alignof(MyStruct);

  0003d	c7 45 24 04 00
	00 00		 mov	 DWORD PTR sz$[rbp], 4

; 34   : 	std::cout << "alignsize := " << alignsize << std::endl;

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@FJCOFKIP@alignsize?5?3?$DN?5@
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00052	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00057	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0005e	8b 55 04	 mov	 edx, DWORD PTR alignsize$[rbp]
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0006e	48 89 85 00 01
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0007c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 35   : 	std::cout << "sz := " << sz << std::endl;

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PCMKKBDA@sz?5?3?$DN?5@
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00097	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0009c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  000a3	8b 55 24	 mov	 edx, DWORD PTR sz$[rbp]
  000a6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv83[rbp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  000b3	48 89 85 00 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000c1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 36   : 	std::cout << "sizeof := " << sizeof(MyStruct) << std::endl;

  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GHPPAHCE@sizeof?5?3?$DN?5@
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000dc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000e1	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  000e8	ba 0c 00 00 00	 mov	 edx, 12
  000ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv95[rbp]
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z
  000fa	48 89 85 00 01
	00 00		 mov	 QWORD PTR tv132[rbp], rax
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00108	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR tv132[rbp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 37   : }

  00115	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  0011c	5f		 pop	 rdi
  0011d	5d		 pop	 rbp
  0011e	c3		 ret	 0
?foo@AlignofCpp@@QEAAXXZ ENDP				; AlignofCpp::foo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?run@AlignofCpp@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?run@AlignofCpp@@QEAAXXZ PROC				; AlignofCpp::run, COMDAT

; 5    : void AlignofCpp::run() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    : 	this->storage();

  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?storage@AlignofCpp@@QEAAXXZ ; AlignofCpp::storage

; 7    : }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?run@AlignofCpp@@QEAAXXZ ENDP				; AlignofCpp::run
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00040	90		 npad	 1
  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	90		 npad	 1
  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\project\game_server\Server\AlignofCpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F0899E5_AlignofCpp@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00036	90		 npad	 1
  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
